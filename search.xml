<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python哈希表相关练习题</title>
      <link href="/2025/07/24/python%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2025/07/24/python%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="【哈希表】2023A-集五福"><a href="#【哈希表】2023A-集五福" class="headerlink" title="【哈希表】2023A-集五福"></a>【哈希表】2023A-集五福</h1><p>题目描述<br>集五福作为近年来大家喜闻乐见迎新春活动，集合爱国福、富强福、和谐福、友善福、敬业福即可分享超大红包。以 0 和 1 组成的长度为 5 的字符串代表每个人所得到的福卡，每一位代表一种福卡，1 表示已经获得该福卡，单类型福卡不超过 1 张，随机抽取一个小于 10 人团队，求该团队最多可以集齐多少套五福？<br>from collections import Counter<br> 团队数组，包含了n个字符串，表示每个人拥有的五福<br>team = input().split(“,”)<br> 用于统计团队中各种五福个数的长度为的哈希表<br>cnt = Counter()</p><p> 遍历团队中的每一个人<br>for person in team:</p><pre><code># 遍历每一个人拥有的五福for i, num in enumerate(person):    # 如果这个人拥有第i个五福，那么计数+1    if num == &quot;1&quot;:        cnt[i] += 1</code></pre><p> 整个团队中最少的那个五福的数目，决定了能凑齐五福的套数<br> 要注意：如果哈希表长度小于5，说明有某个福字的数量为0，应该输出0<br>print(0) if len(cnt) &lt; 5 else print(min(cnt.values()))</p><p>enumerate()总而言之enumerate就是枚举的意思，把元素一个个列举出来，第一个是什么，第二个是什么，所以他返回的是元素以及对应的索引。</p><p>是否存在重复元素 return (len(set(nums)) != len(nums))<br>两个数组的交集 return list(set(nums1) &amp; set(nums2))<br>有效的字母异位词 return Counter(s) == Counter(t)</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>stm32单片机开发</title>
      <link href="/2025/07/21/stm32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
      <url>/2025/07/21/stm32%E5%8D%95%E7%89%87%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="数据手册（datasheet"><a href="#数据手册（datasheet" class="headerlink" title="数据手册（datasheet)"></a>数据手册（datasheet)</h1><p>St官方 www.st.com/<br>中文：华秋 IC资料 立创 </p><h1 id="F1-F4-G0架构"><a href="#F1-F4-G0架构" class="headerlink" title="F1 F4 G0架构"></a>F1 F4 G0架构</h1><h2 id="Flash存储器"><a href="#Flash存储器" class="headerlink" title="Flash存储器"></a>Flash存储器</h2><p>STM32系列微控制器内部集成了Flash存储器，主要用于存储程序代码</p><h2 id="SRAM（Static-Random-Access-Memory）"><a href="#SRAM（Static-Random-Access-Memory）" class="headerlink" title="SRAM（Static Random-Access Memory）"></a>SRAM（Static Random-Access Memory）</h2><p>SRAM（Static Random-Access Memory）即静态随机存取存储器，所谓“静态”是指这种存储器只要保持通电，里面存储的数据就可以一直保持，但是掉电之后就会丢失。与DRAM（动态随机存取存储器）相比它不需要周期性的刷新里面的数据，操作简单，速度更快，但是更加的昂贵，集成度不如DRAM高。</p><h2 id="EEPRA"><a href="#EEPRA" class="headerlink" title="EEPRA"></a>EEPRA</h2><p>STM32L系列单片机内部提供了EEPROM存储区域，但实质上，其FLASH也是EEPROM类型，只不过有一块区域被开放出来专门用作EEPROM操作而已。</p><h2 id="RCC"><a href="#RCC" class="headerlink" title="RCC"></a>RCC</h2><p>在STM32微控制器中，RCC（Reset and Clock Control，复位和时钟控制）模块是一个非常重要的部分。它负责管理和配置系统时钟、外设时钟以及复位控制。时钟系统是单片机运行的基础，时钟信号推动单片机内各个部分执行相应的指令。</p><h2 id="AHB-bus"><a href="#AHB-bus" class="headerlink" title="AHB bus"></a>AHB bus</h2><p>AHB=Advanced High Performance Bus，译作高级高性能总线。AHB用于高性能模块(如CPU、DMA和DSP等)之间的连接。<br>APB=Advanced Peripheral Bus，译作高级外设总线。APB主要用于低带宽的周边外设之间的连接，例如UART、1284等。在STM32中APB又可分为APB1和APB2，具体所连接的外设又有所不同，如下图（STM32F10xxx系统结构图）。</p><h1 id="HAL库"><a href="#HAL库" class="headerlink" title="HAL库"></a>HAL库</h1><p>它的出现比标准库要晚，但其实和标准库一样，都是为了节省程序开发的时期，而且HAL库尤其的有效，如果说标准库把实现功能需要配置的寄存器集成了，那么HAL库的一些函数甚至可以做到某些特定功能的集成。也就是说，同样的功能，标准库可能要用几句话，HAL库只需用一句话就够了。<br>hal文件分为两大类<br>Driver文件下：<br>_hal_ppp.c(ppp指外设)主要外设驱动源文件<br>用户级别文件CORE文件下<br>_hal_msp.c 包含用户应用程序使用外设msp<br>main.c/.h</p><h2 id="HandleTypedef"><a href="#HandleTypedef" class="headerlink" title="HandleTypedef"></a>HandleTypedef</h2><p>句柄是一个整数，单独的看它只是数字。</p><p>但这个整数是进程句柄表数组的下标，有了这个下标，操作系统就可以找到其索引的数据结构，并能找到数据结构里面的指针，然后根据这个指针获取内核里的某个对象。</p><h2 id="MSP-函数"><a href="#MSP-函数" class="headerlink" title="MSP 函数"></a>MSP 函数</h2><p>MSP函数是指MCU支持包中的函数，主要用于进行MCU级别的硬件初始化设置。特别是带有MspInit的函数，负责初始化外设使用到的GPIO、时钟、NVIC、DMA等硬件，以便于用户代码在不同型号的MCU上进行移植。</p><h2 id="UART"><a href="#UART" class="headerlink" title="UART"></a>UART</h2><p>UART（通用异步收发器）是一种广泛使用的串行通信协议，它允许设备通过串行端口进行通信。UART协议是异步的，意味着它不需要时钟信号来同步发送和接收数据。这种通信方式是全双工的，即可以同时发送和接收数据。</p><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>函数指针的调用，即是一个通过函数指针调用的函数；</p><p>如果你把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，就说这是回调函数。</p><h2 id="何为-weak？"><a href="#何为-weak？" class="headerlink" title="何为__weak？"></a>何为__weak？</h2><p>__weak 用于修饰函数，赋予这个函数 弱 的属性。</p><h1 id="GPIO"><a href="#GPIO" class="headerlink" title="GPIO"></a>GPIO</h1><p> GPIO是什么？<br>    General Purpose Input Output 通用功能输出输出<br>    GPIO就是从芯片内部引出来一根功能复用的口线（电线）<br>    功能复用是指：GPIO的引脚可以由CPU配置成不同的功能<br>    比如：输入功能 输出功能 模拟功能 复用功能等等</p><h2 id="电源引脚"><a href="#电源引脚" class="headerlink" title="电源引脚"></a>电源引脚</h2><p>VCC VSS VDD</p><h2 id="复位"><a href="#复位" class="headerlink" title="复位"></a>复位</h2><p>RST</p><h2 id="晶振"><a href="#晶振" class="headerlink" title="晶振"></a>晶振</h2><p>OSC32.768Khz外部低速<br>OSC 高速</p><h2 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h2><h2 id="GPIO电气特性"><a href="#GPIO电气特性" class="headerlink" title="GPIO电气特性"></a>GPIO电气特性</h2><p><img src="https://freeimghost.com/images/2025/07/21/_21-7-2025_182625_www.bilibili.com.jpeg" alt="屏幕截图 21 7 2025 182625 www.bilibili.com"></p><h2 id="施密特触发器"><a href="#施密特触发器" class="headerlink" title="施密特触发器"></a>施密特触发器</h2><p><img src="https://freeimghost.com/images/2025/07/21/_21-7-2025_20366_www.bilibili.com.jpeg" alt="屏幕截图 21 7 2025 20366 www.bilibili.com"></p><h2 id="IDR"><a href="#IDR" class="headerlink" title="IDR"></a>IDR</h2><p>在STM32微控制器中，<strong>IDR（Input Data Register）</strong>寄存器是一个端口输入数据寄存器，用于读取当前端口的电平状态。IDR寄存器的低16位（0~15）每一位对应一个端口，表示该端口的输入状态。</p><h2 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h2><p>浮空输入(Floating Input)<br>上拉输入(Pull-up Input)<br>下拉输入(Pull-down Input)<br>模拟输入(Analog Input)<br>开漏输出(Open-Drain Output)<br>推挽输出(Push-Pull Output)<br>开漏复用输出(AF Open-Drain Output)<br>推挽复用输出(AF Push-Pull Output)<br>详细见：<a href="https://www.cnblogs.com/cute-jiojio/p/18706955#23-ttl%E8%82%96%E7%89%B9%E5%9F%BA%E8%A7%A6%E5%8F%91%E5%99%A8">https://www.cnblogs.com/cute-jiojio/p/18706955#23-ttl%E8%82%96%E7%89%B9%E5%9F%BA%E8%A7%A6%E5%8F%91%E5%99%A8</a></p><h2 id="按键"><a href="#按键" class="headerlink" title="按键"></a>按键</h2><p>消除抖动加电容0.1uf </p><h2 id="基地址与偏移地址"><a href="#基地址与偏移地址" class="headerlink" title="基地址与偏移地址"></a>基地址与偏移地址</h2><p>但是 CPU 的寻址能力只有16位，也就是能够访问到 2^16 = 65536 个地址，远远不够地址总线的 1048576 个地址，CPU 总共有 65536 个地址可以处理，也就是 64K 的内存空间，这样显然是远远不够的。</p><p>三、解决方案<br>假设外部地址共有 1M 的内存，也就是 1048576 个地址空间，利用 CPU 的 16 位的寻址能力去访问，CPU 内存为 64K，就可以将外部内存分为许多快，每一块的内存大小就为 CPU 的内存大小：64K，通过计算 1048576 / 65536 = 16，也就是需要将1M的内存空间分成 16 块 64K 的空间。</p><h2 id="软件延迟"><a href="#软件延迟" class="headerlink" title="软件延迟"></a>软件延迟</h2><p>HAl_delay()</p><h2 id="HAL库常用函数使用介绍—HAL-GPIO"><a href="#HAL库常用函数使用介绍—HAL-GPIO" class="headerlink" title="HAL库常用函数使用介绍—HAL_GPIO"></a>HAL库常用函数使用介绍—HAL_GPIO</h2><p><a href="https://blog.csdn.net/llq_the7/article/details/108235951">https://blog.csdn.net/llq_the7/article/details/108235951</a></p><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>中断与异常的区别<br>下图 表示中断时 CPU 的活动轨迹。还可进一步把中断分为外中断和内中断。</p><h2 id="外中断"><a href="#外中断" class="headerlink" title="外中断"></a>外中断</h2><p>——就是我们指的中断——是指由于外部设备事件所引起的中断，如通常的磁盘中断、打印机中断等；</p><h2 id="内中断"><a href="#内中断" class="headerlink" title="内中断"></a>内中断</h2><p>——就是异常——是指由于 CPU 内部事件所引起的中断，如程序出错(非法指令、地址越界)。内中断(trap)也被译为“捕获”或“陷入”。</p><p>异常是由于执行了现行指令所引起的。由于系统调用引起的中断属于异常。<br>中断则是由于系统中某事件引起的，该事件与现行指令无关。</p><p><a href="https://blog.csdn.net/qq_29996285/article/details/88078939">https://blog.csdn.net/qq_29996285/article/details/88078939</a></p><p><img src="https://freeimghost.com/images/2025/07/27/_27-7-2025_194525_www.bilibili.com.jpeg" alt="屏幕截图 27 7 2025 194525 www.bilibili.com"></p><p>一、NVIC简单解释<br>1、在 STM32（Cortex-M3）中有两个优先级控制（这与学 C51时只有一个中断等级不同）：</p><p>-<strong>抢占式优先级</strong>（NVIC_IRQChannelPreemptionPriority）<br>-子优先级 也叫<strong>响应优先级</strong>（NVIC_IRQChannelSubPriority）<br>2、NVIC是在 M3内核处理器上的，在 M3的所有中断机制都由NVIC实现，看下图</p><p><img src="https://freeimghost.com/images/2025/07/27/64beb4ed15b018089171089ba04ae70c.png" alt="64beb4ed15b018089171089ba04ae70c"></p><p>3、Cortex-M3支持大量异常，包括16 -4 -1=11个系统异常，和最多 240个外部中断——简称IRQ。具体使用了这 240个中断源中的多少个，则由芯片制造商决定。由外设产生的中断信号，除了 SysTick的之外，全都连接到 NVIC的中断输入信号线。典型情况下，处理器一般支持 16到 32个中断，当然也有在此之外的。<br><img src="https://freeimghost.com/images/2025/07/27/1076794dd48de85fc7baaaf9e4cce987.png" alt="1076794dd48de85fc7baaaf9e4cce987"></p><h2 id="优先级规则"><a href="#优先级规则" class="headerlink" title="优先级规则"></a>优先级规则</h2><p><img src="https://freeimghost.com/images/2025/07/27/_27-7-2025_195657_www.bilibili.com.jpeg" alt="屏幕截图 27 7 2025 195657 www.bilibili.com"></p><p><a href="https://cloud.tencent.com/developer/article/2092912">https://cloud.tencent.com/developer/article/2092912</a></p><p><img src="https://freeimghost.com/images/2025/07/27/_27-7-2025_20557_www.bilibili.com.jpeg" alt="屏幕截图 27 7 2025 20557 www.bilibili.com"></p><h2 id="末尾连锁，延迟到达"><a href="#末尾连锁，延迟到达" class="headerlink" title="末尾连锁，延迟到达"></a>末尾连锁，延迟到达</h2><p>处理完异常后还检测到异常会处于挂起，继续处理，减少压栈操作。如果后面的中断优先级更高则会处理后面</p><h2 id="中断事件控制器"><a href="#中断事件控制器" class="headerlink" title="中断事件控制器"></a>中断事件控制器</h2><p><img src="https://freeimghost.com/images/2025/07/27/_27-7-2025_202330_www.bilibili.com.jpeg" alt="屏幕截图 27 7 2025 202330 www.bilibili.com"></p><h2 id="EXTI-extern-interrupt-配置"><a href="#EXTI-extern-interrupt-配置" class="headerlink" title="EXTI(extern interrupt)配置"></a>EXTI(extern interrupt)配置</h2><p><strong>相关标准库代码</strong>：<a href="https://blog.csdn.net/qq_50808730/article/details/132320733">https://blog.csdn.net/qq_50808730/article/details/132320733</a></p><p><img src="https://freeimghost.com/images/2025/07/28/5e549f35cc9fcde7bf42e12fe944e482.png" alt="5e549f35cc9fcde7bf42e12fe944e482"></p><p>1、使能GPIO时钟；</p><p>2、设置GPIO的工作模式；（上拉、下拉、浮空输入）</p><p>3、使能AFIO时钟；（设置AFIO时钟，开启相关寄存器）；</p><p>4、设置GPIO与EXIT映射关系；（选择IO对应EXIT输入线，AFIO_EXICR寄存器）；</p><p>5、设置EXIT屏蔽、上升沿、下降沿；（设置EXIT对应通道的屏蔽和上升沿、下降沿触发，EMR、RTSR、FTSR寄存器）；</p><p>6、设置NVIC，分3步（优先级分组、优先级以及使能）；</p><p>7、设置中断服务函数（包括清除中断标志）；</p><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p><img src="https://freeimghost.com/images/2025/07/28/_28-7-2025_212413_www.bilibili.com.jpeg" alt="屏幕截图 28 7 2025 212413 www.bilibili.com"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python学习02</title>
      <link href="/2025/06/26/python%E5%AD%A6%E4%B9%A002/"/>
      <url>/2025/06/26/python%E5%AD%A6%E4%B9%A002/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>如果想要初始化一个只包含一个元素的元组，那么必须使用在括号中带上一个逗号<br>列表名 = []<br>列表名 = list()</p><p>集合名 = {元素, 元素, 元素, …, 元素}<br>集合名 = set()</p><p>nums_set = {1, 2, 3, 4, 5}<br>print(6 in nums_set)    # 输出False<br>print(1 in nums_set)    # 输出True</p><p>使用集合的add()方法进行元素添加，其中括号内的参数传入待添加的元素。比如<br>``` shell<br>nums_set = {1, 2, 3, 4, 5}<br>nums_set.add(6)<br>print(nums_set)<br>```<br>使用集合的remove()方法进行元素删除<br>集合的特点是：无序性、无重复性、可哈希性。<br>打印集合时，输出时元素的顺序和初始化时元素的顺序是不一样的。<br>集合中的元素的值必须是唯一的，不可重复的。<br>在实际应用，我们经常使用集合的这一个特性，结合列表和集合之间的相互转化，实现列表的去重操作。比如<br>``` shell<br>nums = [2, 2, 4, 4, 3, 3, 1, 1]<br>nums_no_repeat = list(set(nums))<br>print(nums_no_repeat)#[1, 2, 3, 4]<br>``` </p><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p>在Python中，字典通常用花括号（{}）表示，用英文逗号（,）将其中的键值对进行分隔，每一个键值对的键和值之间冒号（:）分隔开。基本语法形如<br>``` shell<br>grade_dic = {“xiaoming”: 90, “xiaohong”: 70, “xiaohei”: 60, “xiaogang”: 70}<br>print(grade_dic)<br>```<br><strong>8.2.1.2 空字典的初始化</strong><br>``` shell<br>字典名 = {}<br>字典名 = dict()<br>```</p><p>注意到，虽然集合和字典都使用花括号{}来表示，但是空集合的初始化只能使用set()来进行。<br>如果使用{}来初始化一个变量，会被认为是一个空字典的初始化，而不是一个空集合的初始化。<br>使用例：<br>``` shell<br>grade_dic = {“xiaoming”: 90, “xiaohong”: 70, “xiaohei”: 60, “xiaogang”: 70}<br>print(grade_dic[“xiaoming”])<br>print(grade_dic[“xiaogang”])<br>```</p><p>``` shell<br>grade_dic = {“xiaoming”: 90, “xiaohong”: 70, “xiaohei”: 60, “xiaogang”: 70}<br>print(list(grade_dic.keys()))        # 获得所有key构成的列表<br>print(list(grade_dic.values()))      # 获得所有value构成的列表<br>print(list(grade_dic.items()))       # 获得所有key-value对构成的列表<br>```</p><p>```shell</p><h1 id="异常处理语句在处理输入时的应用"><a href="#异常处理语句在处理输入时的应用" class="headerlink" title="异常处理语句在处理输入时的应用"></a>异常处理语句在处理输入时的应用</h1><p>try-except异常处理语句可以用来解决输入次数未知的问题。<br>当try中的语句块没有出现错误可以正常运行时，执行try中的语句块，否则执行except下的语句块。<br>``` shell<br>while(True):<br>    try:<br>        n = int(input())</p><pre><code>    # do somethingexcept:    break</code></pre><p>```</p><p>可以在一个while True死循环中进行持续的输入，当最后一个行输入空行的时候，会进入到except中的语句，使用break退出while循环，完成输入。</p><h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><p> 类的组成部分</p><ul><li>属性（attributes）：属性是类中定义的变量，用于存储对象的状态。也被称为成员变量（member variable）。</li><li><p>方法（methods）：方法是类中定义的函数，用于实现对象的行为。也被称为成员函数（member function）。<br>```shell<br>class Dog:<br>  def <strong>init</strong>(self, name, age, color):</p><pre><code>  self.name = name      # 属性  self.age = age        # 属性  self.color = color    # 属性</code></pre><p>  def bark(self):           # 方法</p><pre><code>  print(f&quot;&#123;self.name&#125; is barking.&quot;)</code></pre><p>  def roll_over(self):      # 方法</p><pre><code>  print(f&quot;&#123;self.name&#125; is rolling over.&quot;)</code></pre><p>  def grow_up(self, year):  # 方法</p><pre><code>  self.age += year  print(f&quot;&#123;self.name&#125; is &#123;self.age&#125; years old.&quot;)</code></pre><p>```</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python栈相关练习题</title>
      <link href="/2025/06/26/%E6%A0%88%E7%9B%B8%E5%85%B3%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2025/06/26/%E6%A0%88%E7%9B%B8%E5%85%B3%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="7-6-练习"><a href="#7-6-练习" class="headerlink" title="7.6 练习"></a>7.6 练习</h1><h2 id="输入正整数数字n"><a href="#输入正整数数字n" class="headerlink" title="输入正整数数字n"></a>输入正整数数字n</h2><p>```shell<br>n = int(input())<br>```</p><h2 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h2><p>```shell<br>for i in range(0,10)<br>    row = list()<br>    for j in range (i,10)<br>        row.append(f”{i}<em>{j}={i</em>j}”)<br>    print(“ “.join(row))<br>```</p><h2 id="字符数量统计"><a href="#字符数量统计" class="headerlink" title="字符数量统计"></a>字符数量统计</h2><p>```shell<br>s = input()<br>a_num = 0<br>b_num = 0<br>for ch in s<br>    if ch == “a”:<br>    a_num += 1<br>    if ch == “b”:<br>    b_num += 1<br>print(a_num,b_num)<br>```</p><h2 id="三位数判断"><a href="#三位数判断" class="headerlink" title="三位数判断"></a>三位数判断</h2><p>```shell<br>def func(x)<br>    s = str(x)<br>    a,b,c = int(s[0]),int(s[1]),int(s[2])<br>    if a <strong> 3 + b </strong> 3 + c ** 3 == x:<br>        return True<br>    else:<br>        return False</p><p>num = int(input())<br>for i in range (100,n+1)<br>    if func(i):<br>        print(i)</p><p>```   </p><h2 id="列表向右移动"><a href="#列表向右移动" class="headerlink" title="列表向右移动"></a>列表向右移动</h2><p>```shell<br>num_list = list( map(int,input().split() ) ) #字符串输入转数字列表<br>K = int(input())<br>n = len(list)<br>ans = [ str(lst[num_list(i-k)%n]) for i in range(n) ]<br>print(“ “.join(ans))</p><p>如果还是无法理解，可以使用另一种写法来完成。</p><p>lst = list(map(int, input().split()))<br>k = int(input())<br>n = len(lst)<br>ans = [“”] * n<br>for i in range(n):<br>    ans[(i+k)%n] = str(lst[i])<br>print(“ “.join(ans))<br>``` </p><h2 id="数组数值统计-比大小"><a href="#数组数值统计-比大小" class="headerlink" title="数组数值统计(比大小)"></a>数组数值统计(比大小)</h2><p>```shell<br>nums = list(map(int,input().split()) )<br>ans_max= nums[0]<br>ans_min= nums[0]<br>ans_sum= 0<br>for num in nums:<br>    if num &gt; ans_max:<br>        ans_max = num<br>    if num &lt; ans_min:<br>        ans_min = num<br>    ans_sum += num<br>print(ans_min, ans_max, ans_sum)<br>``` </p><h2 id="二维数组修改"><a href="#二维数组修改" class="headerlink" title="二维数组修改"></a>二维数组修改</h2><p>```shell<br>n, m = map(int, input().split())<br>mat = list()<br>for i in range(n):<br>    mat.append(list(map(int, input().split()))) # 进行俩次输入</p><p>for i in range(n):<br>    for j in range(m):<br>        if mat[i][j] &lt;= 0:<br>            mat[i][j] = 0<br>        elif mat[i][j] &gt;= 10:<br>            mat[i][j] = 10</p><p>for row in mat:<br>    print(“ “.join(list(map(str, row))))<br>``` </p><h2 id="LC1603-设计停车系统"><a href="#LC1603-设计停车系统" class="headerlink" title="LC1603. 设计停车系统"></a>LC1603. 设计停车系统</h2><p>请你给一个停车场设计一个停车系统。停车场总共有三种不同大小的车位：大，中和小，每种尺寸分别有固定数目的车位。<br>请你实现 ParkingSystem 类：</p><ul><li>ParkingSystem(int big, int medium, int small) 初始化 ParkingSystem 类，三个参数分别对应每种停车位的数目。</li><li>bool addCar(int carType) 检查是否有 carType 对应的停车位。 carType 有三种类型：大，中，小，分别用数字 1， 2 和 3 表示。一辆车只能停在 carType 对应尺寸的停车位中。如果没有空车位，请返回 false ，否则将该车停入车位并返回 true 。</li></ul><p>```shell<br>class ParkingSystem(object):<br>    def <strong>init</strong>(self,big:int,middle:int,small:int):<br>        self.big = big<br>        self.middle = middle<br>        self.small = small</p><pre><code>def addCar(self,carType:int):    if carType == 1:        if self.big == 0:            return False        else:            self.big = self.big - 1    elif carType == 2:        if self.middle == 0:            return False        else:            self.middle = self.middle - 1    elif carType == 3:        if self.small == 0:            return False        else:            self.small = self.small - 1    return True</code></pre><p>ans = list()<br>n = int(input())<br>park_name,a,b,c = input().split()<br>big,middle,small = int(a),int(b),int(c)<br>Park_1 = ParkingSystem(big,middle,small)<br>for i in range(n-1):<br>    park_name,num = input().split()<br>    num = int(num)<br>    ans.append(Park_1.addCar(num))<br>for res in ans:<br>    print(“true” if res else “false”)</p><p>``` </p><p>if not 判断是否为NONE</p><h1 id="合理括号"><a href="#合理括号" class="headerlink" title="合理括号"></a>合理括号</h1><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：</p><ul><li>1、左括号必须用相同类型的右括号闭合。</li><li>2、左括号必须以正确的顺序闭合。<br>```shell</li></ul><p>class Solution:<br>    def isValid(self, s: str) -&gt; bool:</p><pre><code>    # 当字符串长度为奇数的时候，属于无效情况，直接返回 False    if len(s) % 2 == 1:         # 无效情况，返回 False         return False    # 构建一个栈，用来存储括号    stack = list()    # 遍历字符串数组中的所有元素    for c in s :         # 如果字符为左括号 ( ，那么就在栈中添加对左括号 （        if c == &#39;(&#39; :           # 添加对左括号 （           stack.append(&#39;(&#39;)         # 如果字符为左括号 [ ，那么就在栈中添加对左括号 [        elif c == &#39;[&#39; :           # 添加对应的右括号 ]           stack.append(&#39;[&#39;)         # 如果字符为左括号 &#123; ，那么就在栈中添加对左括号 &#123;        elif c == &#39;&#123;&#39; :           # 添加对应的右括号 &#125;           stack.append(&#39;&#123;&#39;)        else:            if not stack:                return False             top = stack[-1]            if (top == &#39;(&#39; and c == &#39;)&#39; ) or (top == &#39;[&#39; and c == &#39;]&#39; ) or (top == &#39;&#123;&#39; and c == &#39;&#125;&#39;)  :                stack.pop()            else :                return False</code></pre><p>return not stack</p><p> ```</p><h1 id="逆波兰表示法"><a href="#逆波兰表示法" class="headerlink" title="逆波兰表示法"></a>逆波兰表示法</h1><p>根据 逆波兰表示法，求表达式的值。<br>有效的算符包括 +、-、<em>、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。<br>注意 两个整数之间的除法只保留整数部分，向零截断。<br>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。<br>输入：tokens = [“2”,”1”,”+”,”3”,”</em>“]<br>输出：9<br>解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9<br>class Solution:<br>    def evalRPN(self, tokens: List[str]) -&gt; int:</p><pre><code>    # 使用一个列表作为栈，存储操作数，从左到右遍历逆波兰表达式    result = []    # 遍历字符串数组    for token in tokens:        # 如果是运算符        if token in &quot;+-*/&quot;:            # 先出栈的是右操作数            rightNum = result.pop()            # 后出栈的是左操作数            leftNum = result.pop()            # 计算结果            if token == &quot;+&quot;:                ans = leftNum + rightNum            elif token == &quot;-&quot;:                ans = leftNum - rightNum            elif token == &quot;*&quot;:                ans = leftNum * rightNum            elif token == &quot;/&quot;:                ans = int(leftNum / rightNum)        else:            # 转换为数字            ans = int(token)        # 存储结果        result.append(ans)    # 返回栈顶元素    return result[-1]</code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>if not stack :用于检查列表是否为空<br>如果栈已经为空，执行代码</p><p>pairs = [(‘(‘, ‘)’), (‘{‘, ‘}’), (‘[‘, ‘]’)]<br> if (ch_stack_top, ch) not in pairs:<br> 用于判断是否配对</p><p> self.q = deque()用于队列，先入先出<br> self.q.popleft()：将窗口最左边的元素移除去<br> self.q.append(val)加入队列<br> “”.join(stack) 列表转字符串<br> h = list(map(int, input().split())) 输入列表<br> lst = list(zip(h, w, idx))  整合为三元的元组，组成一个新的列表lst<br> lst.sort()  直接对lst排序，会先按照身高排序，再按照体重排序，再按照编号排序</p><p> 内置函数eval()能够直接计算一个字符串表达式的值，能够识别加减乘除以及括号。</p><p> 判断数字：if ‘0’ &lt;= ch &lt;= ‘9’<br> 字符： elif ch &gt;= ‘a’ and ch &lt;= ‘z’:</p><p>in range(0,count)</p><p>names = path.split(“/“)分割</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理08</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8608/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8608/</url>
      
        <content type="html"><![CDATA[<p>数字滤波器的结构设计<br>数字滤波器设计的核心是通过给定的时域或频域系统方程，在时域设计出对应的滤波器。数字系统的差分方程表示为：</p><script type="math/tex; mode=display">\sum_{k=0}^{N} a_{k} y[n-k] = \sum_{k=0}^{M} b_{k} x[n-k]</script><p>从中提取出 $y[n]$，并简单变换后得到关于现态输出 $y[n]$ 的差分方程：</p><script type="math/tex; mode=display">y[n] = \frac{1}{a_{0}} (\sum_{k=0}^{M} b_{k} x[n-k] - \sum_{k=1}^{N} a_{k} y[n-k]), a_{0} \neq 0</script><p>这个方程是数字滤波器设计的主要依据。根据加法的性质，这个差分方程中求和运算中的内部和外部的各部分可以调换计算次序，进而根据计算过程中每个部分计算次序的先后、滤波器的结构也随之不同。<br>滤波器设计图的画法<br>滤波器设计图的画法有两种：信号框图和信号流图。差分方程中的计算以加法、乘法、和时延为主，本小节也主要关注这两种画法中三种模块的表示方法。<br>信号框图<br>信号框图中加法器、乘法器和延迟器的画法如下图所示：<br><img src="https://freeimghost.com/images/2025/06/23/20211125160512.png" alt="code"></p><h3 id="信号流图"><a href="#信号流图" class="headerlink" title="信号流图"></a>信号流图</h3><p>信号流图中加法器、乘法器和延迟器的画法如下图所示：<br><img src="https://freeimghost.com/images/2025/06/23/20211125160644.png" alt="code"><br>FIR系统的物理结构类型<br>FIR系统的差分方程由于不含有除了$y[n]$的其他含$y$项，因此FIR系统中没有反馈。FIR系统的差分方程可以写作：</p><script type="math/tex; mode=display">y[n] = \sum_{k=0}^{M} b_k x[n - k]</script><p>FIR系统的冲激响应即为系统差分方程的系数：</p><script type="math/tex; mode=display">h[n] =\begin{cases}b_n, & 0 \leq n \leq M \\0, & otherwise\end{cases}</script><h2 id="FIR系统的物理结构可以分为直接型（Direct-form）和级联型（Cascade-form）两种。"><a href="#FIR系统的物理结构可以分为直接型（Direct-form）和级联型（Cascade-form）两种。" class="headerlink" title="FIR系统的物理结构可以分为直接型（Direct form）和级联型（Cascade form）两种。"></a>FIR系统的物理结构可以分为直接型（Direct form）和级联型（Cascade form）两种。</h2><h3 id="直接型"><a href="#直接型" class="headerlink" title="直接型"></a>直接型</h3><p>将FIR系统的差分方程中的求和直接拆开，有：</p><script type="math/tex; mode=display">y[n] = b_1 x[n - 1] + b_2 x[n - 2] + .. + b_M x[n - M]</script><p>替换系统的冲激响应：</p><script type="math/tex; mode=display">y[n] = h[1] x[n - 1] + h[x] x[n - 2] + .. + h[M] x[n - M]</script><p>系统的直接型结构为：<br><img src="https://freeimghost.com/images/2025/06/23/20211125161657.png" alt="code"><br>如上图所示，在直接型结构中，$x[n]$分别做$M$次时延，每一次时延后的信号与对应系数相乘后，与前面的序列相加。</p><h3 id="硬件消耗"><a href="#硬件消耗" class="headerlink" title="硬件消耗"></a>硬件消耗</h3><p>因此，直接型需要：</p><ul><li>$M$个时延单元(也称为存储单元，用于存放之前的输入)</li><li>$M+1$个乘法单元</li><li>$M$个加法单元<br>直接型虽然容易搭建，但是消耗器件较多。此外，由于加法器和延迟器都处于系统干路上，如果任何一个延迟器或者加法器出现故障，则整个滤波器系统将无法正常工作。<h4 id="级联型"><a href="#级联型" class="headerlink" title="级联型"></a>级联型</h4>系统方程（z域）和系统的冲激响应之间存在如下关系：<script type="math/tex; mode=display">H(z)=\sum_{n=0}^{M}h[n]z^{-n}</script>可以考虑构造若干个关于$z^{-n}$的多项式$(b<em>{0k}+b</em>{1k}z^{-1}+b<em>{2k}z^{-2})$，通过若干个多项式相乘构造$\sum</em>{n=0}^{M}h[n]z^{-n}$，即：<script type="math/tex; mode=display">H(z)=\sum_{n=}^{M}h[n]z^{-n}=\prod_{k=1}^{M_s}(b_{0k}+b_{1k}z^{-1}+b_{2k}z^{-2})</script>其中$M<em>s=[(M+1)/2]$，向下取整。$b</em>{1k}$表示第$k$个多项式的第1项系数，以此类推。<br>那么有Z域下系统输入输出关系为：<br><img src="https://cdn.jsdelivr.net/gh/fomalhaut1998/markdown_pic/img/code.png" alt="code"></li></ul><h2 id="IIR系统的物理结构类型"><a href="#IIR系统的物理结构类型" class="headerlink" title="IIR系统的物理结构类型"></a>IIR系统的物理结构类型</h2><p>描述IIR系统的差分方程可以表示为：</p><script type="math/tex; mode=display">y[n] = \sum_{k=0}^{M} b_k x[n-k] + \sum_{k=1}^{N} a_k y[n-k]</script><p>描述IIR系统的差分方程中除了$y[n]$外还有其他的含$y$项，即$y[n-m]$。因此IIR系统的物理结构中含有反馈信号。</p><h3 id="接型-直接型I"><a href="#接型-直接型I" class="headerlink" title="接型/直接型I"></a>接型/直接型I</h3><p>描述IIR系统的差分方程在z域上可以表示为：</p><script type="math/tex; mode=display">Y(z) = H(z)X(z) = \left(\sum_{k=0}^{M} b_k z^{-k}\right) \frac{1}{1 - \sum_{k=1}^{N} a_k z^{-k}} X(z)</script><p>设$H<em>1(z) = \sum</em>{k=0}^{M} b<em>k z^{-k}, H_2 = \frac{1}{1 - \sum</em>{k=1}^{N} a_k z^{-k}}$。<br>可以发现$H_1(z)$没有极点，是FIR系统，$H_2(z)$是IIR系统。<br>在直接型I中，$X(z)$首先与$H_1(z)$结合，有：</p><script type="math/tex; mode=display">V(z) = H_1(z)X(z)</script><script type="math/tex; mode=display">Y(z) = V(z)H_2(z)</script><p>在时域中，直接型I将系统的差分方程分解为了两部分：</p><script type="math/tex; mode=display">y[n]=v[n]+\sum_{k=1}^Na_ky[n-k]</script><script type="math/tex; mode=display">v[n]=\sum_{k=0}^Mb_kx[n-k]</script><blockquote><p>可以看出$y[n]$是IIR系统，$v[n]$是一个FIR系统。</p></blockquote><p>直接型I的结构如下图所示，输入信号$x[n]$在通过若干个延迟器后的结果赋权相加，然后将此结果与输出信<br>号$y[n]$的反馈信号通过若干个延迟器后的结果赋权相加，得到现态输出$y[n]$的结果。<br><img src="https://freeimghost.com/images/2025/06/23/20211127131242.png" alt="code"></p><h3 id="硬件消耗-1"><a href="#硬件消耗-1" class="headerlink" title="硬件消耗"></a>硬件消耗</h3><p>直接型I需要：</p><ul><li>M+N个加法单元</li><li>M+N+1个乘法单元</li><li>M+N+1个时延单元<br>直接型I的优点是搭建简单，整个信号流图基本按照公式原本的样子即可搭建。缺点是所需要的硬件消耗较大。<h3 id="标准型-直接型II"><a href="#标准型-直接型II" class="headerlink" title="标准型/直接型II"></a>标准型/直接型II</h3>由，<script type="math/tex; mode=display">Y(z) = H_1(z)H_2(z)X(z) = (\sum_{k=0}^{M} b_kz^{-k})\frac{1}{1-\sum_{k=1}^{N} a_kz^{-k}}X(z)</script>在直接型II中，X(z)首先与H2(z)结合：<script type="math/tex; mode=display">W(z) = X(z)H_2(z)</script><script type="math/tex; mode=display">Y(z) = W(z)H_1(z)</script>即<script type="math/tex; mode=display">H(Z) = \frac{Y(Z)}{W(Z)}\frac{W(Z)}{X(Z)}</script>在时域中表示为：<script type="math/tex; mode=display">w[n] = \sum_{k=1}^{N} a_k w[n - k] + x[n]</script><script type="math/tex; mode=display">y[n] = \sum_{k=0}^{M} b_k w[n - k]</script>因此，虽然同直接型Ⅰ，$x[n]$信号也是通过若干延迟器后赋权相加，但是此时的权重不再是$b_N$而应当为$a_N$。赋权后的信号进入另一组延迟器后赋权$b_N$相加。<br>下图表示了$M = N$时标准型Ⅱ的结构：<br><img src="https://freeimghost.com/images/2025/06/23/20211127134905.png" alt="code"><br>进一步化简，由于两组延迟器存储的内容都是$w[n-k]$，因此两路信号可以共用一组延迟器，进而大幅度减小延迟器的消耗：<br><img src="https://freeimghost.com/images/2025/06/23/20211127135151.png" alt="code"><h3 id="硬件消耗-2"><a href="#硬件消耗-2" class="headerlink" title="硬件消耗"></a>硬件消耗</h3>直接型Ⅱ需要：</li><li>M+N个加法单元</li><li>M+N+1个乘法单元</li><li>max(M,N)个时延单元<br>相比于直接型Ⅰ，直接型Ⅱ大幅度减少了时延单元的消耗。<h3 id="级联型-1"><a href="#级联型-1" class="headerlink" title="级联型"></a>级联型</h3>IIR系统的级联型原理与FIR系统的级联型原理相同，都是在Z域内把一个多项式分解为多个多项式的乘积。<script type="math/tex; mode=display">H(z)=G\prod_{k=1}^{N_s}\frac{1+b_{1k}'z^{-1}+b_{2k}'z^{-2}}{1-a_{1k}'z^{-1}-a_{2k}'z^{-2}}</script></li></ul><p>其中$N<em>s=\frac{N+1}{2}$ 但是IIR系统中每一个二级多项式单元$\frac{1+b</em>{1k}’z^{-1}+b<em>{2k}’z^{-2}}{1-a</em>{1k}’z^{-1}-a_{2k}’z^{-2}}$可以选择用直接型Ⅰ或者直接型Ⅱ实现，但是通常仍然选择使用直接型Ⅱ以节省时延单元的使用个数。</p><p>级联型的结构图如下所示：<br><img src="https://freeimghost.com/images/2025/06/23/20211127141419.png" alt="code"></p><h3 id="硬件消耗-3"><a href="#硬件消耗-3" class="headerlink" title="硬件消耗"></a>硬件消耗</h3><p>当 $M = N$ 时，级联型需要：</p><ul><li>$4 \frac{(N+1)}{2}$ 个加法单元</li><li>$4 \frac{(N+1)}{2} + 1$ 个乘法单元</li><li>$2 N_s$ 个时延单元<br>相比于直接型，级联型结构中每一个子系统单元都是独立运行的，因此系统鲁棒性优于普通型。<h3 id="并联型"><a href="#并联型" class="headerlink" title="并联型"></a>并联型</h3>由 $z$ 域下系统频率响应可以通过提取常数改写为：<script type="math/tex; mode=display">H(z) = \sum_{k=0}^{N_p} C_k z^{-k} + \sum_{k=1}^{N_s} \frac{e_{0k} + e_{1k} z^{-1}}{1 - a_{1k} z^{-1} - a_{2k} z^{-2}}</script></li></ul><p>其中 $M \geq N$ 时（即 $H(z)$ 是假分数时）存在第一项，$C_k$ 为常数，$N_p = M - N$。$N_S = \frac{N+1}{2}$。</p><p>由于其后的求和符号，每一个二级多项式分式都可以独立计算，从而实现并行化。<br><img src="https://freeimghost.com/images/2025/06/23/20211127143607.png" alt="code"><br>硬件消耗</p><p>当 $M = N$ 时，级联型需要：</p><ul><li>$4 \frac{(N+1)}{2}$ 个加法单元</li><li>$3 \frac{(N+1)}{2} + 1$ 个乘法单元</li><li>$2 N_s$ 个时延单元</li></ul><p>FIR和IIR的物理结构类型的特点</p><ul><li>当 $h[n]$ 是一个对称或者反对称序列时，直接型的计算复杂度可以被减少。</li><li>级联型和并联型系统的鲁棒性高于直接型。</li><li>相比于FIR滤波器，IIR滤波器对量化噪声更敏感。</li><li>级联型和并联型系统中的每一个子系统的运行情况相比于直接型更容易被观察。<br><img src="https://freeimghost.com/images/2025/06/23/20211127150608.png" alt="code"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理07</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8607/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8607/</url>
      
        <content type="html"><![CDATA[<h1 id="数字滤波器·数字系统的表示"><a href="#数字滤波器·数字系统的表示" class="headerlink" title="数字滤波器·数字系统的表示"></a>数字滤波器·数字系统的表示</h1><h2 id="数字系统的响应"><a href="#数字系统的响应" class="headerlink" title="数字系统的响应"></a>数字系统的响应</h2><p>数字滤波器是一种处理离散时间信号的系统。数字信号 $x[n]$ 输入数字滤波器进行处理后生成输出信号 $y[n]$ 。这个过程可以用卷积定理表示为：</p><script type="math/tex; mode=display">y[n] = x[n] \otimes h[n] = \sum x[m] h[n-m]</script><p>$h[n]$ 是数字系统在时域上的表示，称为冲激响应，也是系统输入信号为冲激序列时系统的输出结果。对(1)做离散时间傅里叶变换，可以得到：</p><script type="math/tex; mode=display">Y(e^{j\omega}) = X(e^{j\omega}) H(e^{j\omega})</script><p>$H(e^{j\omega})$ 是 $h[n]$ 做离散时间傅里叶变换的结果，称为系统的频率响应。</p><blockquote><p>可以发现(2)成立的条件中包含 $h[n]$ 收敛的条件，如果 $h[n]$ 不收敛，则不存在其离散时间傅里叶变换的结果 $H(e^{j\omega})$ 。</p><h2 id="数字系统的表示"><a href="#数字系统的表示" class="headerlink" title="数字系统的表示"></a>数字系统的表示</h2><p>除了上述两个表达式可以描述一个特定的数字系统外，一个特定的数字系统还可以使用如下两种方法进行表达：差分方程和传递函数。<br>系统可以表示为线性常系数差分方程：</p><script type="math/tex; mode=display">\sum_{k=0}^{N} a_{k} y[n-k] = \sum_{k=0}^{M} b_{k} x[n-k], a_{0} \neq 0, b_{0} \neq 0</script><p>对上式做Z变换，两边相比，得到系统的传递函数：</p><script type="math/tex; mode=display">H(z) = \frac{Y(z)}{X(z)} = \frac{\sum_{k=0}^{M} b_{k} z^{-k}}{\sum_{k=0}^{N} a_{k} z^{-k}}</script><p>但是由于z变换成立的条件是要给出收敛域RoC，因此在未给出传递函数的前提下，其对应的差分方程可能有两个：</p><ul><li>右边序列：<script type="math/tex; mode=display">\sum_{k=0}^{N} a_{k} y[n-k] = \sum_{k=0}^{M} b_{k} x[n-k]</script>此时数字系统是因果系统。</li><li>左边序列:<script type="math/tex; mode=display">\sum_{k=0}^{N} a_{k} y[n-k] = - \sum_{k=-M}^{-1} b_{k} x[n+k]</script>此时数字系统是非因果系统。<h2 id="传递函数的特征"><a href="#传递函数的特征" class="headerlink" title="传递函数的特征"></a>传递函数的特征</h2><h3 id="与冲激响应"><a href="#与冲激响应" class="headerlink" title="与冲激响应"></a>与冲激响应</h3>系统传递函数可以写作两个多项式的比：<script type="math/tex; mode=display">H(z) = \frac{b_0}{a_0} \frac{\prod_{k=1}^{M}(1-c_kz^{-1})}{\prod_{k=1}^{N}(1-b_kz^{-1})}</script>其中 $M$ 对应差分方程右侧除去 $x[n]$ 外含有 $x$ 项的个数，$N$ 对应差分方程左侧除去 $y[n]$ 外含有 $y$ 项的个数，$c_k$ 表示零点，$d_k$ 表示极点。<br>化简上式得到如下结构：<script type="math/tex; mode=display">H(z) = \sum_{r=0}^{M-N} B_r Z^{-r} + \sum_{k=1}^{N} \frac{A_k}{1-d_kz^{-1}}</script>对其做 Z 反变换：<script type="math/tex; mode=display">h[n] = \sum_{r=0}^{M-N} B_r \delta[n-r] + \sum_{k=1}^{N} A_k (d_k)^n u[n]</script>对上述反变换结果进行讨论：<br>当 $N &gt; 0$ 时，差分方程左边有除了 $y[n]$ 的其他含 $y$ 项 $y[n-k]$，即此时系统方程当前输出由 $x$ 项、系统以前的输出 $y[n-k]$ 共同决定，系统含有反馈，此时系统方程为：<script type="math/tex; mode=display">h[n] = \sum_{r=0}^{M-N} B_r \delta[n-r] + \sum_{k=1}^{N} A_k (d_k)^n u[n]</script>由于 $u[n]$ 是一个无限长度的序列，因此系统的冲激响应也是无限长度的，称这样的系统为无限冲激响应系统（IIR System）。<br>当 $N = 0$ 时，差分方程左边只含有 $y[n]$，系统方程的当前输出只由输入 $x$ 决定，系统不含有反馈，此时系统方程为：<script type="math/tex; mode=display">h[n] = \sum_{r=0}^{M} B_r \delta[n-r]</script>由于 $\delta[n-r]$ 长度有限，整个系统的冲激响应的长度是有限的，称这样的系统为有限冲激响应系统（FIR System）。<br>|  | N | 差分方程左侧 | 有无反馈 | 冲激响应长度 |<br>| —- | —- | —- | —- | —- |<br>| IIR | N&gt;0 | 含有 $y[n-k]$ | 有 | 无限 |<br>| FIR | N=0 | 只有 $y[n]$ | 无 | 有限 |<h4 id="与频率响应"><a href="#与频率响应" class="headerlink" title="与频率响应"></a>与频率响应</h4>根据Z变换和离散时间傅里叶的定义式，可以推出：<script type="math/tex; mode=display">H(e^{j\omega}) = H(z)|_{z=exp(j\omega)}</script>因此系统的频率响应也可以写作多项式分式：<script type="math/tex; mode=display">H(e^{j\omega}) = \frac{b_0}{a_0} \frac{\Pi_{k=1}^{M}(1-c_ke^{-j\omega})}{\Pi_{k=1}^{N}(1-b_ke^{-j\omega})}</script></li></ul></blockquote><p>使用MATLAB® 绘制系统的频率响应</p><p>在 [0, 2π] 上生成若干个采样点，作为作图的 x 轴。</p><p>使用函数 fft() 可以生成指定序列的离散傅里叶变换结果。 abs() 函数能够给出指定序列在每个采样点上的绝对值，即幅度。 angle() 函数可以生成指定序列在每个采样点上的相位。<br>绘制其频率响应需要注总的是：</p><p>·需要对$h[n]$进行周期延拓，方法是使用 zeros(1,L)创建一个长度为L的全0向量用 x=[x,zeros(1,L)] 对</p><p>其填充。</p><p>·使用 fft()函数求其FFT结果。 abs()求结果的绝对值得到幅频响应，angle()求FFT结果的相频响</p><p>应。</p><p>· 横轴应当为 [0:(N+L)]<em>2</em>pi/(N+L+1) 使得O-2π内每一格的长度为$\frac{2\pi}{N+L+1}$ (因为 $\theta:(\mathbb{N}+L)$ 有N+L+1个</p><p>数)</p><p>下面的示例程序展示了如何绘制$h[n]=Sa(0.1(n-50)),0\leq n\leq100$的幅频和相频响应曲线：<br>```shell<br>N=100; %100点FFT<br>n=0:N;<br>x=sinc(0.1<em>(n-50));<br>x=[x,zeros(1,1000)]; %对x周期延拓到长度为1000<br>X=fft(x); %求其FFT/DFS结果（Amplitude Response）<br>subplot(2,1,1);<br>w=[0:(N+1000)]</em>2*pi/(N+1001);%横轴，每一格表示2π/(N+1001)<br>plot(w./pi,abs(X));  %取绝对值求幅频响应（Magnitude Response）并作π归一化<br>title(‘Magnitude Response’);<br>axis ([0 2 0 12]);<br>xlabel(‘\omega/\pi’);<br>subplot(2,1,2);<br>plot(w./pi,angle(X)); % angle(X)表示求其相频响应<br>title(‘Phase Response’);<br>axis ([0 2 -4 4]);<br>xlabel(‘\omega/\pi’);</p><p>```</p><p>给定系统Z域下的传递函数$H(z)=\frac{\sum b_kz^{-k}}{\sum a_kz^{-k}}$时，可以使用[H,w]=freqz(b,a,n)返回其频率响应 н和对应的π归一化的角频率横轴 w,其中 a 是$\sum a_kz^{-k}$由高次幂到低次幂排列时的系数向量，其中 b 是$\sum b_kz^{-k}$由高次幂到低次幂排列时的系数向量，n 为计算时所指定的N点FT的点数，缺省值为512。<br>如下的例程中给出了如何绘制$H(z)=\frac{1-0.5z^{-1}}{1-2z^{-1}+z^{-2}}$的频率响应图：<br>```shell<br>b=[1,-0.5];<br>a=[1,-2,1];<br>[H,w]=freqz(b,a);<br>plot(w,abs(X));  %取绝对值求幅频响应（Magnitude Response）<br>title(‘Magnitude Response’);<br>plot(w,angle(X)); % angle(X)表示求其相频响应<br>title(‘Phase Response’);<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理06</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8606/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8606/</url>
      
        <content type="html"><![CDATA[<h1 id="快速傅里叶变换"><a href="#快速傅里叶变换" class="headerlink" title="快速傅里叶变换"></a>快速傅里叶变换</h1><p> 快速傅里叶变换（FFT）是一种计算离散傅里叶变换的算法，其独有的计算方式能够大幅度减小离散傅里叶变换的计算量，使得离散傅里叶变换在计算机上具有可实现性。</p><h2 id="离散傅里叶变换的计算量"><a href="#离散傅里叶变换的计算量" class="headerlink" title="离散傅里叶变换的计算量"></a>离散傅里叶变换的计算量</h2><p>回顾离散傅里叶变换：</p><script type="math/tex; mode=display">X[k] = \sum_{n=0}^{N-1} x[n] W_N^{kn}</script><p>可以发现，计算一个离散傅里叶变换需要计算：</p><ol><li>N个$x[n]W$，即N次复数乘法</li><li>N-1次$x[i]W + x[i+1]W$，即(N-1)次复数加法</li></ol><p>根据复数乘法原则$(a+jb)(c+jd)=(ac-bd)+j(ad+bc)$，和复数加法原则$(a+jb)+(c+jd)=(a+c)+j(b+d)$，可以发现：1次复数乘法与4个实数乘法和2个实数加法等价；1次复数加法和2次实数加法等价。</p><p>因此计算一次离散傅里叶变换需要计算：</p><ol><li>$4N^2$次实数乘法</li><li>$4N^2 - 2N$次实数加法<br>其中实数乘法对计算资源的消耗非常的大，因此考虑使用别的算法以简化实数乘法的次数。<br>时域抽取的快速傅里叶变换<br>将离散傅里叶变换分为奇数和偶数两个段落：<script type="math/tex; mode=display">X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r]W_N^{2rk} + \sum_{r=0}^{\frac{N}{2}-1} x[2r+1]W_N^{(2r+1)k}</script><script type="math/tex; mode=display">= \sum_{r=0}^{\frac{N}{2}-1} x[2r]W_N^{2rk} + W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1]W_N^{2rk}</script>根据复数的共轭对称性质：$W_N^{k(N-n)} = W_N^{kN}W_N^{-kn} = W_N^{-kn}$，前半段（$0 - N/2$）的表达式可以写作：<script type="math/tex; mode=display">X[k] = \sum_{r=0}^{\frac{N}{2}-1} x[2r]W_{N/2}^{rk} + W_N^k \sum_{r=0}^{\frac{N}{2}-1} x[2r+1]W_{N/2}^{rk}</script>令$G[k] = \sum<em>{r=0}^{\frac{N}{2}-1} x[2r]W</em>{N/2}^{rk}$，$H[k] = \sum<em>{r=0}^{\frac{N}{2}-1} x[2r+1]W</em>{N/2}^{rk}$：<script type="math/tex; mode=display">X[k] = G[k] + W_N^kH[k], k = 0, 1, \ldots, N-1</script>将前半段式子的下标加上$N/2$考虑后半段式子的和，由于$W_N^{k+N/2} = -1$，因此：<script type="math/tex; mode=display">X[k+N/2] = G[k] - W_N^kH[k], k = 0, 1, \ldots, N-1</script>综合两段，得到时域抽取的快速傅里叶变换：</li></ol><script type="math/tex; mode=display">X[k]=G[k]+W_N^kH[k],k=0,1,\ldots,N/2-1</script><script type="math/tex; mode=display">X[k+N/2]=G[k]-W_N^kH[k],k=0,1,\ldots,N/2-1</script><p>可以将整个序列继续折中细分成多个小部分，每个部分计算蝶形结构。在<br>为2的次方数时，使用折中法正好可以使得最终细分到相邻的奇偶两项做蝶形结构运算：<br><img src="https://freeimghost.com/images/2025/06/23/20211030144247.png" alt="code"><br>比如N=8时就可以通过折中法多次两两分组，每组内部进行蝶形运算后的结果再进行蝶形运算：<br><img src="https://freeimghost.com/images/2025/06/23/20211030144446.png" alt="code"><br>其中最低一级的分组通过如下方式进行：<br><img src="https://freeimghost.com/images/2025/06/23/20211030144544.png" alt="code"></p><h3 id="蝶形结构运算"><a href="#蝶形结构运算" class="headerlink" title="蝶形结构运算"></a>蝶形结构运算</h3><p>观察整个快速傅里叶变换的结构：<br><img src="https://freeimghost.com/images/2025/06/23/20211030144723.png" alt="code"><br>可以得出如下结论：</p><p>1.对于$N=2^m$,需要$m$级次蝶形结构的运算。<br>2.对于第$m$级运算，组数为$2^N-m-1$。每一组的$q$总是被赋予-1和权重，权重表示为：</p><script type="math/tex; mode=display">W_{2^{m+1}}^r,r=0,1,2,\ldots,2^m-1</script><p><img src="https://freeimghost.com/images/2025/06/23/20211222132037.png" alt="code"></p><p>快速傅里叶变换的计算量<br>由于一点蝶形运算中不包含乘法，快速傅里叶变换通过应用这样的蝶形结构来削减乘法计算的次数。当长度 $N=2^m$ 时，简单分析可得快速傅里叶变换的计算量：</p><script type="math/tex; mode=display">\frac{N^2}{2^m} + m\frac{N}{2} = N + \frac{N}{2} \log_2 N</script><p>频域抽取的快速傅里叶变换<br>在频域内对离散傅里叶变换进行拆分，可以得到：</p><script type="math/tex; mode=display">\begin{aligned}X[2r] &= \sum_{n=0}^{N/2-1} x[n] W_N^{2nr} + \sum_{n=0}^{N/2-1} x[n+N/2] W_N^{2r(n+N/2)} \\&= \sum_{n=0}^{N/2-1} [x[n] + x[n+N/2]] W_{N/2}^{rn}, r = 0, 1, \ldots, N/2 - 1\end{aligned}</script><p>同理对于频域内的奇数序列有：</p><script type="math/tex; mode=display">X[2r+1] = [x[n] - x[n+N/2]] W_{N/2}^{rn}, r = 0, 1, \ldots, N/2 - 1</script><p>令 $g[n] = x[n] + x[n+N/2], h[n] = x[n] - x[n+N/2]$，得到频域抽取的快速傅里叶变换：</p><script type="math/tex; mode=display">X[2r] = \sum_{n=0}^{N/2-1} g[n] W_{N/2}^{rn}</script><script type="math/tex; mode=display">X[2r+1] = W_N^n \sum_{n=0}^{N/2-1} h[n] W_{N/2}^{rn}, r = 0, 1, \ldots, N/2 - 1</script><p>同样符合蝶形结构：<br><img src="https://freeimghost.com/images/2025/06/23/20211030150736.png" alt="code"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理05</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8605/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8605/</url>
      
        <content type="html"><![CDATA[<h1 id="离散傅里叶级数·离散傅里叶变换"><a href="#离散傅里叶级数·离散傅里叶变换" class="headerlink" title="离散傅里叶级数·离散傅里叶变换"></a>离散傅里叶级数·离散傅里叶变换</h1><h2 id="复指数序列的周期性"><a href="#复指数序列的周期性" class="headerlink" title="复指数序列的周期性"></a>复指数序列的周期性</h2><p>$x[n] = e^{j\omega_0 n}$，由于$\omega_0 \in [0, 2\pi)$的周期性，因此有：$x[n] = e^{j\omega_0 n} = e^{j(\omega_0 + 2\pi k)n}$，令$\omega_0 N = 2\pi k, k \in Z$，有：</p><script type="math/tex; mode=display">x[n] = e^{j\omega_0 n} = e^{j(\omega_0 + 2\pi k)n} = x[n + N]</script><p>复指数序列$x[n]$具有周期性，称$N$为其周期。</p><p>由于$\omega_k = \frac{2\pi k}{N} \in [0, 2\pi)$，因此当序列周期为$N$时，当且仅当$k = 0, 1, 2, \ldots, N - 1$时存在$N$个不同的$\omega_k$。$N = \frac{2\pi k}{\omega_0}$。<br><img src="https://freeimghost.com/images/2025/06/23/A5EC68750987DF38D05E1771EF035FF2.png" alt="code"></p><h2 id="离散傅里叶级数（DFS）"><a href="#离散傅里叶级数（DFS）" class="headerlink" title="离散傅里叶级数（DFS）"></a>离散傅里叶级数（DFS）</h2><p>根据连续时间周期信号的傅里叶变换：</p><script type="math/tex; mode=display">x(t) = \sum_{k=-\infty}^{\infty} X(k\Omega_0) e^{jk\Omega_0 t}</script><p>其中连续信号的角频率为：$\Omega_0 = \frac{2\pi}{T}$<br>类比连续时间周期信号，设周期序列$\tilde{x}[n]: \tilde{x}[n] = \tilde{x}[n+rN], r \in Z$，有：</p><script type="math/tex; mode=display">\tilde{x}[n] = \sum_{k=-\infty}^{\infty} X(k\Omega_0) e^{j\frac{2\pi}{N}kn}</script><p>由于满足条件的频率分量$\omega_k$只有$N$个：</p><script type="math/tex; mode=display">\tilde{x}[n] = \sum_{k=-\infty}^{\infty} X(k\Omega_0) e^{j\frac{2\pi}{N}kn}</script><script type="math/tex; mode=display">= \sum_{k=0}^{N-1} X(k\Omega_0) e^{j\frac{2\pi}{N}kn}</script><script type="math/tex; mode=display">= \frac{1}{N} \sum_{k=0}^{N-1} \tilde{X}[k] e^{j\frac{2\pi}{N}kn}</script><p>其中$\tilde{X}[k]$为离散傅里叶级数系数，可反推得到：</p><script type="math/tex; mode=display">\tilde{X}[k] = \sum_{n=0}^{N-1} \tilde{x}[n] e^{-j\frac{2\pi}{N}kn}</script><p>定义$W_N^{kn} = e^{-j(\frac{2\pi}{N})kn}$，有离散傅里叶级数分析：</p><script type="math/tex; mode=display">\tilde{X}[k]=\sum_{n=0}^{N-1}\tilde{x}[n]W_N^{kn}</script><p>离散傅里叶级数合成：</p><script type="math/tex; mode=display">\tilde{x}[n]=\frac{1}{N}\sum_{k=0}^{N-1}\tilde{X}[k]W_N^{-kn}</script><p>$W_N^{kn}$是复数的角度表示形式，一般计算时转化为z域中的坐标以方便计算。如:$W_4^2=e^{-j\frac{2\pi}{4}\times2}=-1$</p><h3 id="离散傅里叶级数的意义"><a href="#离散傅里叶级数的意义" class="headerlink" title="离散傅里叶级数的意义"></a>离散傅里叶级数的意义</h3><p>周期为$N$的序列可以表示为$N$个周期为$N$的复指数序列的线性组合。<br>离散傅里叶级数与离散时间傅里叶变换（DTFT）的关系<br>事实上，可以将离散傅里叶级数看作是对离散时间傅里叶变换结果$X(e^{j\omega})$以周期为$N$做延拓后，对其进行采样的结果。<br><img src="https://freeimghost.com/images/2025/06/23/20211014165116.png" alt="code"></p><h3 id="离散傅里叶级数与Z变换的关系"><a href="#离散傅里叶级数与Z变换的关系" class="headerlink" title="离散傅里叶级数与Z变换的关系"></a>离散傅里叶级数与Z变换的关系</h3><p>给定Z变换：$X(z)|_{z=e^{j\omega}}=X(e^{j\omega})$，那么：</p><script type="math/tex; mode=display">\tilde{X}[k]=X(z)|_{z=e^{j(2\pi/N)k}}=X(e^{j(2\pi/N)k}), k=0,1,\ldots,N-1</script><p>即离散傅里叶级数可以看做是在Z变换的单位圆上做均匀采样的结果。<br>离散傅里叶级数的性质</p><ol><li>周期性：如果$\tilde{x}[n]$的周期为$N$，$\tilde{X}[k]$的周期同样为$N$。</li><li>线性：$a\tilde{x}_1[n]+b\tilde{x}_2[n]\leftrightarrow a\tilde{X}_1[k]+b\tilde{X}_2[k]$</li><li>时移：$\tilde{x}[n-m]\leftrightarrow W_N^{km}\tilde{X}[k]$</li><li>频移：$\tilde{X}[k-l]\leftrightarrow W_N^{-nl}\tilde{x}[n]$</li><li>对偶性：如果$\tilde{x}[n]\leftrightarrow\tilde{X}[k]$，那么$\tilde{X}[n]\leftrightarrow N\tilde{x}[-k]$<br>周期卷积<br>如果两个序列$\tilde{x}_1[n]$、$\tilde{x}_2[n]$有相同的周期$N$，有：<script type="math/tex; mode=display">\tilde{x}_1[n]\tilde{\otimes}\tilde{x}_2[n]=\sum_{m=0}^{N-1}\tilde{x}_1[m]\tilde{x}_2[n-m]\leftrightarrow\tilde{X}_1[k]\tilde{X}_2[k]</script>周期卷积定理可以被矩阵化为：<script type="math/tex; mode=display">\tilde{x}[n] \tilde{\otimes} \tilde{y}[n] = \left[ \begin{array}{c} \tilde{z}[0] \\ \tilde{z}[1] \\ \cdots \\ \tilde{z}[N-2] \\ \tilde{z}[N-1] \end{array} \right] \mid_{periodic} = \left[ \begin{array}{ccccc} \tilde{y}[0] & \tilde{y}[N-1] & \cdots & \tilde{y}[2] & \tilde{y}[1] \\ \tilde{y}[1] & \tilde{y}[0] & \cdots & \tilde{y}[3] & \tilde{y}[2] \\ \cdots & \cdots & \cdots & \cdots & \cdots \\ \tilde{y}[N-2] & \tilde{y}[N-1] & \cdots & \tilde{y}[0] & \tilde{y}[N-1] \\ \tilde{y}[N-1] & \tilde{y}[N-2] & \cdots & \tilde{y}[1] & \tilde{y}[0] \end{array} \right] \left[ \begin{array}{c} \tilde{x}[0] \\ \tilde{x}[1] \\ \cdots \\ \tilde{x}[N-2] \\ \tilde{x}[N-1] \end{array} \right]</script>可以发现矩阵 $Y$ 内部每一列的元素在进行周期性的位置轮换。<br>周期卷积计算可以在 MATLAB® 中使用命令 <code>toeplitz(x,y)</code> 得到，其中 x, y 为两个周期序列单周期内所有元素组成的向量，两个向量长度相同。<blockquote><p>当两向量长度不等时，使用0进行补齐。<br>离散傅里叶变换（DFT）<br>当离散傅里叶序列变换的对象变成非周期有限长度序列时，此时的变换称为离散傅里叶变换（DFT）：</p><script type="math/tex; mode=display">X[k] = \sum_{n=0}^{N-1} x[n] W_N^{kn}, 0 \leq n \leq N-1</script><p>其反变换为：</p><script type="math/tex; mode=display">x[n] = \frac{1}{N} \sum_{k=0}^{N-1} X[k] W_N^{-kn}, 0 \leq n \leq N-1</script></blockquote></li></ol><p>离散傅里叶变换的性质</p><ol><li>线性：$a x_1[n] + b x_2[n] \leftrightarrow a X_1[k] + b X_2[k], 0 \leq k \leq N-1$</li><li>2.对偶性：如果$x[n]\leftrightarrow X[k]$,那么$\tilde{X}[n]\leftrightarrow Nx[(-k)mod(N)],0\leq k\leq N-1$<br>3.$N$点循环时移：$x[(n-m)mod(N)]\leftrightarrow W_N^kmX[k],0\leq k\leq N-1$<br><img src="https://freeimghost.com/images/2025/06/23/20211016143431-1.png" alt="code"></li></ol><p>可以发现：离散傅里叶级数是对离散时间傅里叶变换的结果进行采样，而一周期内的采样结果则为离散傅里叶变换的结果。<br>对于Z变换，$z=re^{j\omega}$，如果选择$r=1$，那么Z变换将退化为离散时间傅里叶变换：</p><script type="math/tex; mode=display">X(e^{j\omega}) = X(z)\big|_{z=e^{j\omega}}</script><p>因此，Z域单位圆上的任意一点表示$e^{j\omega}$。而离散傅里叶变换是对离散时间傅里叶变换一周期内的采样，因此离散傅里叶变换是在Z域单位圆上的均匀采样。<br>\section*{循环卷积/圆周卷积}<br>定义两个序列非周期序列的$N$点$x[n]$、$y[n]$循环卷积/圆周卷积（Circular shift）为：</p><script type="math/tex; mode=display">x[n]\otimes_Ny[n]=\sum_{m=0}^{N-1}x[m]y[(n-m)mod(N)]</script><p>$x[n]$和$y[n]$具有相同的序列长度，两个序列长度如果不相同，使用0进行补齐。<br>其物理意义是将其中一个序列反转（称为反褶）后，进行$N$点循环时移$m$次，与原序列线性卷积的结果。<br>同样地，循环卷积也可以被矩阵化为：</p><script type="math/tex; mode=display">x[n]\otimes y[n]=\begin{bmatrix}z[0] \\z[1] \\\cdots \\z[N-2] \\z[N-1]\end{bmatrix}=\begin{bmatrix}y[0] & y[N-1] & \cdots & y[2] & y[1] \\y[1] & y[0] & \cdots & y[3] & y[2] \\\cdots & \cdots & \cdots & \cdots & \cdots \\y[N-2] & y[N-1] & \cdots & y[0] & y[N-1] \\y[N-1] & y[N-2] & \cdots & y[1] & y[0]\end{bmatrix}\begin{bmatrix}x[0] \\x[1] \\\cdots \\x[N-2] \\x[N-1]\end{bmatrix}</script><p>利用矩阵化后的式子可以高效地在时域计算循环卷积。<br>在频域上，循环卷积对应两个序列DFT的乘积：</p><script type="math/tex; mode=display">x[n] \otimes y[n] \leftrightarrow X[k]Y[k]</script><p>当 $N$ 大于两个序列的长度时，直接将两个序列的长度用0填充到长度 $N$，再进行循环卷积。<br>当 $N$ 小于两个序列的长度时，循环卷积时则会发生混叠（Aliasing）。长度为 $L$ 的序列 $x[n]$ 发生混叠的过程表示为：</p><script type="math/tex; mode=display">\begin{aligned}& x[0], x[1], \ldots, x[N], \ldots, x[L-2], x[L-1] \\& \downarrow \\& x[0] + x[N], x[1] + x[N+1], \ldots, x[N-1] + x[2N-1]\end{aligned}</script><p>\section<em>{循环卷积与线性卷积的关系}<br>当循环卷积的点数大于 $2L-1$（即线性卷积的长度）时，其结果与线性卷积 $\left( x[n] \backslash ^</em> y[n] \right)$ 完全相同。<br>\section*{循环卷积与周期卷积的关系}<br>如果 $\tilde{x_1}[n]$ 、 $\tilde{x_2}[n]$ 分别对应是 $x_1[n]$ 、 $x_2[n]$ 以周期为 $N$ 的延拓，有：</p><script type="math/tex; mode=display">(x_1[n] \otimes_N x_2[n]) R_N = \tilde{x_1}[n] \tilde{\otimes}_N \tilde{x_2}[n]</script><p>$R_N$ 表示以周期为 $N$ 的延拓。<br>即在周期卷积对象的主值序列是循环卷积对象时， $N$ 点循环卷积是 $N$ 点周期卷积的主值序列。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理04</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8604/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8604/</url>
      
        <content type="html"><![CDATA[<h1 id="Z变换"><a href="#Z变换" class="headerlink" title="Z变换"></a>Z变换</h1><h2 id="离散傅里叶变换的局限性"><a href="#离散傅里叶变换的局限性" class="headerlink" title="离散傅里叶变换的局限性"></a>离散傅里叶变换的局限性</h2><p>对于离散傅里叶变换 $X(e^{j\omega}) = \sum x[n]e^{-j\omega n}$，要求原离散信号 $x(n)$ 满足狄利克雷条件，即要求变换中的求和项收敛：</p><script type="math/tex; mode=display">\sum |x[n]| < \infty</script><p>有大量的信号不能满足这一条件。</p><h2 id="Z变换原理"><a href="#Z变换原理" class="headerlink" title="Z变换原理"></a>Z变换原理</h2><p>解决办法是在变换时添加一项 $r^{-n}$，以在保留原信号特征的同时改善原信号的收敛性。</p><script type="math/tex; mode=display">X_r(e^{j\omega}) = \sum x[n]r^{-n}e^{-j\omega n} = \sum x[n](re^{j\omega})^{-n}</script><p>将：$re^{j\omega}$简记为 $z$，得到Z变换的变换公式：</p><script type="math/tex; mode=display">X(z) = \sum x[n]z^{-n}</script><p>Z变换可以将输入序列转变为以指数序列构成的线性组合。</p><h2 id="收敛域"><a href="#收敛域" class="headerlink" title="收敛域"></a>收敛域</h2><p>此时要求改善后的信号满足狄利克雷条件，有：</p><script type="math/tex; mode=display">\sum |x[n]z^{-n}| < \infty</script><p>满足这个条件的$z$的取值称为这个$Z$变换对的收敛域。</p><p>可以发现$|z|$的取值决定了整个线性组合是否满足狄利克雷条件。</p><p>当$|z| = 1$时，$Z$变换退化为离散傅里叶变换，满足这一条件的所有$\omega$的取值在傅里叶平面内构成一个单位圆：<br><img src="https://freeimghost.com/images/2025/06/23/20211001141750.png" alt="code"></p><h2 id="收敛特性"><a href="#收敛特性" class="headerlink" title="收敛特性"></a>收敛特性</h2><p>序列的Z变换是否存在与收敛域有关，下面讨论不同类型序列的收敛域特征</p><div class="table-container"><table><thead><tr><th>序列类型</th><th>收敛域</th></tr></thead><tbody><tr><td>右边序列：$x[n]=a^nu[n]$</td><td>$\</td><td>z\</td><td>&gt;\</td><td>a\</td><td>$</td></tr><tr><td>左边序列：$x[n]=-a^nu[-n-1]$</td><td>$\</td><td>z\</td><td>&lt;\</td><td>a\</td><td>$</td></tr><tr><td>双边序列：$x[n]=a^nu[n]-b^nu[-n-1]$</td><td>$\</td><td>a\</td><td>&lt;\</td><td>z\</td><td>&lt;\</td><td>b\</td><td>$</td></tr></tbody></table></div><p>由上表可以总结出Z变换的三条性质：</p><ul><li>当且仅当收敛域包括单位圆时，原信号才能同时满足稳定性和因果性，其离散傅里叶变换存在。</li><li>收敛域以极点（指数序列的基底）、0、无穷划分边界。</li><li>在收敛域内不存在任何极点。<h2 id="Z反变换"><a href="#Z反变换" class="headerlink" title="Z反变换"></a>Z反变换</h2><h3 id="定义式"><a href="#定义式" class="headerlink" title="定义式"></a>定义式</h3>定义Z反变换为：<script type="math/tex; mode=display">x[n] = \frac{1}{2\pi j} \oint_{ROC} X(z) z^{n-1} dz</script>反变换的定义式涉及到曲线积分、计算比较困难，由于LIT系统的系统方程都能够写作多项式分数的形式，因此对LIT系统方程而言通常不采用求解定义式的方式来求解反变换，而更多地采用如下方法求解反变换式：<h3 id="Z变换式的部分分式形式"><a href="#Z变换式的部分分式形式" class="headerlink" title="Z变换式的部分分式形式"></a>Z变换式的部分分式形式</h3>序列 $x(n)$ 的 $z$ 变换式 $X(z)$ 的一般形式可以写作由两个多项式组成的分式，称为部分分式：<script type="math/tex; mode=display">X(z) = \frac{N(z)}{D(z)} = \frac{\sum b_m z^m}{\sum a_n z^n}</script>其中 $b_m$ 称为方程的零点，$a_m$ 称为方程的极点。<br>当极点为一阶时, 对等式两边同时除以 $z$ 以提取常系数 $A$：<script type="math/tex; mode=display">\frac{X(z)}{z} = \sum_{i=1}^{N} \frac{A_i}{z - a_i}</script></li></ul><p>其中 $A<em>i = \left(z - a_i\right) \frac{X(z)}{z} \bigg|</em>{z=a_i}$</p><p>再乘上 $z$：</p><script type="math/tex; mode=display">X(z) = \sum_{i=1}^{N} \frac{A_{i}z}{z - a_{i}}</script><p>其中 $A<em>{i}$ 为 $x(n)$ 的常系数，$a</em>{i}$ 为底数，也是极点。 对应的 $x(n)$：</p><script type="math/tex; mode=display">x(n) = \sum_{i=0}^{\infty} A_{i}(a_{i})^{n}u[n], n \geq 0</script><p>需要注意的是，需要根据 $z - a_{i}$ 的正负对 Z 变换的收敛域进行讨论:</p><ul><li>当 $|z| &lt; (a<em>{i})</em>{min}$ 时，根据极点对应序列形式（收敛特性一小节中提到的表格），该项对应的指数序列为左边序列 $-A<em>{i}(a</em>{i})^{n}u[-n - 1]$。对应分式项 $\frac{A<em>{i}z}{z - a</em>{i}}$ 应写作 $-\frac{A<em>{i}z}{z - a</em>{i}}$ 以保证 $z - a_{i}$ 恒正。</li><li>当 $|z| &gt; (a<em>{i})</em>{max}$ 时，根据极点对应序列形式，该项对应的指数序列为右边序列 $A<em>{i}(a</em>{i})^{n}u[n]$。 对应分式项应写作 $\frac{A<em>{i}z}{z - a</em>{i}}$ 以保证 $z - a_{i}$ 恒正。</li><li>当 $a<em>{min} &lt; |z| &lt; a</em>{max}$ 时，根据极点对应序列形式，该项对应的指数序列为双边序列。<h3 id="离散系统的频率响应与传递函数"><a href="#离散系统的频率响应与传递函数" class="headerlink" title="离散系统的频率响应与传递函数"></a>离散系统的频率响应与传递函数</h3>离散系统的差分方程可以写作：<script type="math/tex; mode=display">\sum_{k=0}^{N} a_{k}y[n - k] = \sum_{k=0}^{M} b_{k}x[n - k]</script>求得系统的传递函数为：<script type="math/tex; mode=display">H(z) = \frac{Y(z)}{X(z)} = \frac{\sum b_{m}z^{m}}{\sum a_{n}z^{n}}</script>定义系统的频率响应为输入和输出的离散时间傅里叶变换结果之比：<script type="math/tex; mode=display">H(e^{j\omega}) = \frac{Y(e^{j\omega})}{X(e^{j\omega})}</script>当系统的极点在单位圆内，且零点没有限制时，Z变换和离散时间傅里叶变换存在如下关系：<script type="math/tex; mode=display">H(z)\big|_{z=e^{j\omega}} = H(e^{j\omega})</script>即 $z=e^{j\omega}$。带入频率响应，得到：<script type="math/tex; mode=display">H(e^{j\omega}) = \frac{b_0}{a_0} \frac{e^{j\omega(N-M)} \prod_{k=1}^{M} (e^{j\omega} - b_k)}{\prod_{k=1}^{N} (e^{j\omega} - a_k)}</script></li></ul><p>可以发现 $e^{j\omega} - b_k$ 和 $e^{j\omega} - a_k$ 都表示从点 $(b_k, 0)$ 或 $(a_k, 0)$ 到单位圆上一点的向量。<br><img src="https://freeimghost.com/images/2025/06/23/20211220151017.png" alt="code"></p><p>将系统的频率响应转化为角度表示：$H(e^{j\omega}) = |H(e^{j\omega})|e^{j\angle H(e^{j\omega})}$，有：</p><ul><li>系统方程的模长/幅度值(Magnitude)：<script type="math/tex; mode=display">|H(e^{j\omega})| = \frac{\Pi\text{零向量的模长}}{\Pi\text{极向量的模长}}</script>即系统方程频率响应$H(e^{j\omega})$的幅度值-频率响应，简称幅频响应。</li><li>系统方程的相位：<script type="math/tex; mode=display">\angle H(e^{j\omega}) = \sum\text{零向量的角度} - \sum\text{极向量的角度}</script>即系统方程频率响应$H(e^{j\omega})$的相位-频率响应，简称相频响应。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理03</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8603/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8603/</url>
      
        <content type="html"><![CDATA[<h1 id="离散时间傅里叶变换"><a href="#离散时间傅里叶变换" class="headerlink" title="离散时间傅里叶变换"></a>离散时间傅里叶变换</h1><h2 id="傅里叶变换的意义"><a href="#傅里叶变换的意义" class="headerlink" title="傅里叶变换的意义"></a>傅里叶变换的意义</h2><p>对于一个线性时不变系统，系统任意的输入的信号可以表示为一系列特征函数的线性组合。而傅里叶变换的本质在于求出这个线性组合中每一项的系数和这个线性组合本身的表示。而连续时间域中的傅里叶变换是离散域中线性组合概念的拓展。<br>离散频域中的线性时不变系统的特征函数是指数函数（序列）：$e^{j\omega_k n}$，因此通过傅里叶变换，任何一个满足狄利克雷条件的离散时间域中的信号都可以表示为指数序列的线性组合：</p><script type="math/tex; mode=display">x[n] = \sum_k a_k e^{j\omega_k n}</script><p>通过傅里叶变换，这个线性组合可以表示为：</p><script type="math/tex; mode=display">x[n] = \frac{1}{2\pi} \int_{-\pi}^{\pi} X(e^{j\omega}) e^{j\omega n}</script><p>其中$X(j\omega)$为这个线性组合的系数，有：</p><script type="math/tex; mode=display">X(e^{j\omega}) = \sum_{n=-\infty}^{\infty} x[n] e^{-j\omega n}</script><p>上述式子称为离散时间傅里叶变换。&gt; 由于等比数列的求和性质，变换的结果是一个连续频谱。</p><p>其反变换即线性组合的表达式:</p><script type="math/tex; mode=display">x[n] = \frac{1}{2\pi} \int_{-\pi}^{\pi} X(e^{j\omega}) e^{j\omega n}</script><p>由傅里叶变换，这个线性组合的特征函数 $e^{j\omega n}$ 在时域内表现为正弦函数 $cos\omega n$，因此这个线性组合在时域上表征为正弦函数的线性组合，这表示一个信号可以被分解为若干个特性不同的正弦波。</p><p>连续和离散时间傅里叶变换的对比如下表所示：<br><img src="https://freeimghost.com/images/2025/06/23/20210925140243.png" alt="code"></p><h2 id="离散时间傅里叶变换的共轭性质"><a href="#离散时间傅里叶变换的共轭性质" class="headerlink" title="离散时间傅里叶变换的共轭性质"></a>离散时间傅里叶变换的共轭性质</h2><h3 id="序列的分解"><a href="#序列的分解" class="headerlink" title="序列的分解"></a>序列的分解</h3><h4 id="复分解"><a href="#复分解" class="headerlink" title="复分解"></a>复分解</h4><p>同连续傅里叶变换，离散时间傅里叶变换也可以做复分解：</p><script type="math/tex; mode=display">X(e^{j\omega}) = X_R(e^{j\omega}) + jX_I(e^{j\omega})</script><h4 id="共轭分解"><a href="#共轭分解" class="headerlink" title="共轭分解"></a>共轭分解</h4><p>定义序列 $x[n]$ 的共轭对称序列:</p><script type="math/tex; mode=display">x_e[n] = \frac{1}{2}(x[n] + x^*[−n])</script><p>共轭对称序列的性质: $x_e[n] = x_e^*[−n]$<br>序列 $x[n]$ 的共轭反对称序列:</p><script type="math/tex; mode=display">x_o[n] = \frac{1}{2}(x[n] - x^*[−n])</script><p>共轭反对称序列的性质: $x_o[n] = -x_o^*[−n]$<br>任何一个序列 $x[n]$ 可以表示为其共轭对称和共轭反对称序列的和：</p><script type="math/tex; mode=display">x[n] = x_e[n] + x_o[n]</script><p>共轭分解对频域序列也同样适用。</p><h3 id="共轭信号的性质"><a href="#共轭信号的性质" class="headerlink" title="共轭信号的性质"></a>共轭信号的性质</h3><div class="table-container"><table><thead><tr><th>注解</th><th>时域序列</th><th>频域变换</th></tr></thead><tbody><tr><td>反向</td><td>$x\backslash^{*}[n]$</td><td>$X\backslash^{*}(e^{-j\omega})$</td></tr><tr><td></td><td>$x\backslash^{*}[-n]$</td><td>$X\backslash^{*}(e^{j\omega})$</td></tr><tr><td>幅度分量为偶函数</td><td>$</td><td>X(e^{j\omega})</td><td>$</td><td>$</td><td>X(e^{-j\omega})</td><td>$</td></tr><tr><td>相位分量为奇函数</td><td>$\angle X(e^{j\omega})$</td><td>$-\angle X(e^{-j\omega})$</td></tr><tr><td>实部分量为偶函数</td><td>$X_{R}(e^{j\omega})$</td><td>$X_{R}(e^{-j\omega})$</td></tr><tr><td>虚部分量为奇函数</td><td>$X_{I}(e^{j\omega})$</td><td>$-X_{I}(e^{-j\omega})$</td></tr></tbody></table></div><h3 id="离散时间傅里叶变换的性质"><a href="#离散时间傅里叶变换的性质" class="headerlink" title="离散时间傅里叶变换的性质"></a>离散时间傅里叶变换的性质</h3><div class="table-container"><table><thead><tr><th>注解</th><th>时域序列</th><th>频域变换</th></tr></thead><tbody><tr><td>线性</td><td>$ax[n] + by[n]$</td><td>$aX(e^{j\omega}) + bY(e^{j\omega})$</td></tr><tr><td>时移</td><td>$x[n - n_{0}]$</td><td>$e^{-j\omega n_{0}}X(e^{j\omega})$</td></tr><tr><td>频移</td><td>$e^{j\omega_{0}n}x[n]$</td><td>$X(e^{j(\omega - \omega_{0})})$</td></tr><tr><td>反转</td><td>$x[-n]$</td><td>$X(e^{-j\omega})$</td></tr><tr><td>频域微分</td><td>$nx[n]$</td><td>$j\frac{dX(e^{j\omega})}{d\omega}$</td></tr></tbody></table></div><h3 id="卷积特性"><a href="#卷积特性" class="headerlink" title="卷积特性"></a>卷积特性</h3><h4 id="卷积特性-1"><a href="#卷积特性-1" class="headerlink" title="卷积特性"></a>卷积特性</h4><p>时域卷积：</p><script type="math/tex; mode=display">x[n] * y[n] \Leftrightarrow X(e^{j\omega})Y(e^{j\omega})</script><p>频域卷积：</p><script type="math/tex; mode=display">x[n]y[n] \Leftrightarrow \frac{1}{2\pi}X(e^{j\omega}) * Y(e^{j\omega}) = \frac{1}{2\pi}\int_{-\pi}^{\pi}X(e^{j\theta})Y(e^{j(\omega-\theta)}d\theta)</script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理02</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8602/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8602/</url>
      
        <content type="html"><![CDATA[<h1 id="数字系统"><a href="#数字系统" class="headerlink" title="数字系统"></a>数字系统</h1><h2 id="系统的特性"><a href="#系统的特性" class="headerlink" title="系统的特性"></a>系统的特性</h2><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p>线性系统满足两个特点：齐次性和可加性。</p><h4 id="齐次性"><a href="#齐次性" class="headerlink" title="齐次性"></a>齐次性</h4><p>如果$x[n] \to T \to y[n]$，有：</p><script type="math/tex; mode=display">Ax[n] \to T \to Ay[n]</script><p>称系统具有齐次性。</p><h4 id="可加性"><a href="#可加性" class="headerlink" title="可加性"></a>可加性</h4><p>如果$x_1[n] \to T \to y_1[n]$、$x_2[n] \to T \to y_2[n]$，有：</p><script type="math/tex; mode=display">x_1[n] + x_2[n] \to T \to y_1[n] + y_2[n]</script><p>称系统具有可加性。<br>同时满足齐次性和可加性的系统称为线性系统。</p><h3 id="时不变性"><a href="#时不变性" class="headerlink" title="时不变性"></a>时不变性</h3><p>系统中如果输入的时移会导致系统输出的同步时移，这样的系统称为时不变系统：<br>如果$x[n] \rightarrow T \rightarrow y[n]$，有：</p><script type="math/tex; mode=display">x[n - n_0] \rightarrow T \rightarrow y[n - n_0]</script><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>如果系统的输入和输出都有界，那么称系统是稳定的。</p><script type="math/tex; mode=display">x[n] < \infty, y[n] < \infty</script><h3 id="无记忆性"><a href="#无记忆性" class="headerlink" title="无记忆性"></a>无记忆性</h3><p>当前系统的输出只依赖于当前的系统输入、而不依赖于之前的系统输入的系统称为无记忆系统。</p><h3 id="因果性"><a href="#因果性" class="headerlink" title="因果性"></a>因果性</h3><p>当前系统的输出$y[n]$不会依赖于未来的系统输入:$x[n + n_0], n_0 \in Z^*$，这样的系统称为因果系统。<br>无记忆系统一定是因果系统。<br>非因果系统可以通过设置延时器转换为因果系统。</p><h2 id="卷积和"><a href="#卷积和" class="headerlink" title="卷积和"></a>卷积和</h2><p>定义离散信号的卷积称为卷积和：</p><script type="math/tex; mode=display">\sum_{k} x[k] h[n - k] = x[n] * h[n]</script><h4 id="单位采样响应"><a href="#单位采样响应" class="headerlink" title="单位采样响应"></a>单位采样响应</h4><p>对于给定的系统 $T[\cdot]$，当系统输入为单位冲击序列 $\delta[n]$ 时的系统输出 $h[n]$ 称为单位采样响应。</p><script type="math/tex; mode=display">h[n] = T[\delta[n]]</script><p>对于线性系统：$x[n] \rightarrow T \rightarrow y[n]$，<br>由齐次性：$x[0] \delta[n] \rightarrow T \rightarrow x[0] h[n]$<br>由时不变性：$x[k] \delta[n - k] \rightarrow T \rightarrow x[k] h[n - k]$<br>由单位冲激序列的采样特性：$x[n] = \sum x[k] \delta[n - k]$<br>因此：</p><script type="math/tex; mode=display">y[n] = \sum x[k] h[n - k] = x[n] * h[n]</script><p>即系统输出 $y[n]$ 可以表示为系统输入 $x[n]$ 与单位采样响应 $h[n]$ 的卷积。</p><h4 id="卷积和的运算性质"><a href="#卷积和的运算性质" class="headerlink" title="卷积和的运算性质"></a>卷积和的运算性质</h4><ol><li>线性：$x[n] \backslash <em> (h_1[n] + h_2[n]) = x[n] \backslash </em> h_1[n] + x[n] \backslash * h_2[n]$</li></ol><p>线性揭示了卷积和运算可以被并行化处理</p><ol><li>交换律：$x[n] \backslash <em> h_1[n] \backslash </em> h_2[n] = x[n] \backslash <em> h_2[n] </em> h_1[n]$</li><li>结合律：$x[n] \backslash <em> h_1[n] \backslash </em> h_2[n] = x[n] \backslash <em> (h_1[n] </em> h_2[n])$<h3 id="数字系统方程"><a href="#数字系统方程" class="headerlink" title="数字系统方程"></a>数字系统方程</h3>数字系统可以由差分方程进行描述：<script type="math/tex; mode=display">\sum_{k=0}^{N} a_k y[n-k] = \sum_{k=0}^{M} b_k x[n-k]</script>其中系统方程的阶 $N$ 由系统最前输出 $y[n-N]$ 决定。<h4 id="数字系统的频率响应·离散时间傅里叶变换"><a href="#数字系统的频率响应·离散时间傅里叶变换" class="headerlink" title="数字系统的频率响应·离散时间傅里叶变换"></a>数字系统的频率响应·离散时间傅里叶变换</h4>类比于连续时间傅里叶变换，称 $e^{j\omega n}$ 为特征函数（Eigenfunction）。对于数字系统，当系统的输入为特征函数时：<script type="math/tex; mode=display">y[n] = \sum h[k] e^{j\omega(n-k)} = e^{j\omega n} \sum h[k] e^{-j\omega k}</script>这个变换式称为离散时间傅里叶变换。<br>称 $\sum h[k] e^{-j\omega k}$ 为数字系统的频率响应：<script type="math/tex; mode=display">H(e^{j\omega}) = \sum h[k] e^{-j\omega k}</script></li></ol><p>其反变换：$h[n]=\frac{1}{2\pi}\int_{-\pi}^\pi H(e^{j\omega})e^{j\omega n}d\omega$</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数字信号处理01</title>
      <link href="/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8601/"/>
      <url>/2025/06/23/%E6%95%B0%E5%AD%97%E4%BF%A1%E5%8F%B7%E5%A4%84%E7%90%8601/</url>
      
        <content type="html"><![CDATA[<h1 id="数字信号"><a href="#数字信号" class="headerlink" title="数字信号"></a>数字信号</h1><p>数字信号是时间离散、幅值离散的信号。但是在本课中为了简化分析，认为时间离散、幅值连续的信号也是数字信号。<br>数字信号可以由序列进行表示：</p><script type="math/tex; mode=display">\ldots, x[-1], x[0], x[1], \ldots</script><h2 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h2><p>模拟信号是时间连续、幅值连续的信号。使模拟信号转变为数字信号的过程称为采样。采样过程可由如下公式表示：</p><script type="math/tex; mode=display">x[n] = x(t) |_{t=nT_s} = x(nT_s), n \in Z</script><p>其中 $T_s$ 称为采样周期。</p><h3 id="常见的数字信号"><a href="#常见的数字信号" class="headerlink" title="常见的数字信号"></a>常见的数字信号</h3><h4 id="单位冲激序列"><a href="#单位冲激序列" class="headerlink" title="单位冲激序列"></a>单位冲激序列</h4><script type="math/tex; mode=display">\delta[n] = \begin{cases} 1, & n = 0 \\ 0, & others \end{cases}</script><p><img src="https://freeimghost.com/images/2025/06/23/20210919151509-1.png" alt="code"></p><h4 id="冲激序列的采样性质"><a href="#冲激序列的采样性质" class="headerlink" title="冲激序列的采样性质"></a>冲激序列的采样性质</h4><p>类比冲击信号的采样性质，可以发现任何的数字信号都可以表示为时移的单位冲激序列的线性组合。</p><script type="math/tex; mode=display">x[n] = \sum x[k]\delta[n-k]</script><h5 id="单位阶跃序列"><a href="#单位阶跃序列" class="headerlink" title="单位阶跃序列"></a>单位阶跃序列</h5><script type="math/tex; mode=display">u[n] = \begin{cases} 1, & n \geq 0 \\ 0, & others \end{cases}</script><script type="math/tex; mode=display">u[n]</script><script type="math/tex; mode=display">![code](https://freeimghost.com/images/2025/06/23/20210919151704.png)指数序列$$x[n] = a^n</script><p>如果底数$a$是一个复数:$a = Ae^{j\theta}$, 此时可以表示为：</p><script type="math/tex; mode=display">x[n] = A^n(cos\theta n + jsin\theta n)</script><h3 id="指数序列"><a href="#指数序列" class="headerlink" title="指数序列"></a>指数序列</h3><script type="math/tex; mode=display">x[n]=a^n</script><p>如果底数$a$是一个复数：$a=Ae^{j\theta}$,此时可以表示为：</p><script type="math/tex; mode=display">x[n]=A^n(cos\theta n+jsin\theta n)</script><p><img src="https://freeimghost.com/images/2025/06/23/20210919154806.png" alt="code"><br>三角序列<br>连续的三角信号可以表示为：</p><script type="math/tex; mode=display">x(t) = A\sin(\Omega t + \varphi)</script><p>此时的角频率 $\Omega$ 称为模拟角频率，单位为 $\text{rad/s}$。<br>对连续的三角信号进行采样，从而得到数字域的三角信号：</p><script type="math/tex; mode=display">x[n] = A\sin\left(2\pi fn/f_s + \varphi\right) = A\sin(\omega n + \varphi)</script><p>其中 $f_s$ 是采样频率，$\omega = \frac{2\pi f}{f_s}$，称为数字角频率，单位为 $\text{rad}$ 或者 $\text{rad/sample}$。<br>数字角频率的理解<br>由数字角频率：</p><script type="math/tex; mode=display">\omega = \frac{2\pi f}{f_s} = \frac{\Omega}{f_s}</script><p>数字角频率可以看做是模拟角频率对其进行归一化的结果。<br>又有角频率公式：$\omega = 2\pi f_d$，$f_d$ 称为数字频率。</p><script type="math/tex; mode=display">f_d = \frac{f}{f_s}</script><p>数字频率可以看做是对模拟频率$f$进行归一化的结果。<br>三角序列的周期性<br>定义数字信号的周期性为：</p><script type="math/tex; mode=display">x(n) = x(n + N)</script><p>对于数字三角信号（三角序列），有：</p><script type="math/tex; mode=display">Acos(\omega_0n + \varphi) = Acos(\omega_0(n + N) + \varphi) = Acos(\omega_0n + \omega_0N + \varphi), 0 \leq \omega_0 \leq 2\pi</script><p>可以发现当$\omega_0N = 2\pi k, k \in Z$时上述式子成立。<br>得到：</p><script type="math/tex; mode=display">\omega_0 = \frac{2\pi k}{N}, k = 0, 1, \ldots, N - 1</script><p>也就是说，要想三角信号呈周期性：</p><ol><li>$\omega_0$必须是$\pi$的整数倍以保证数字周期$N$是一个自然数。即存在$N = \frac{2\pi k}{\omega_0}, k = 0, 1, \ldots, N - 1$则该序列为周期序列。</li><li>只有N个不同的$\omega_0$使得三角信号呈周期性。</li><li>对于复指数序列，使用欧拉公式变换为三角信号，由于cos和sin部分的数字角频率相等，因此可以按照上述判断标准进行判断。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统07</title>
      <link href="/2025/06/23/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F07/"/>
      <url>/2025/06/23/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F07/</url>
      
        <content type="html"><![CDATA[<h1 id="系统方程"><a href="#系统方程" class="headerlink" title="系统方程"></a>系统方程</h1><h2 id="系统方程概述"><a href="#系统方程概述" class="headerlink" title="系统方程概述"></a>系统方程概述</h2><p>对于一个有输入和输出的系统，可以通过观察系统输入和输出的关系来建立描述系统的方程，在拉普拉斯变换的s域下，系统方程可以表述为系统输出与输入之比：</p><script type="math/tex; mode=display">H(s) = \frac{R(s)}{E(s)}</script><p>也可以按照时域分析方法中的理解，当 $e(t) = \delta(t)$ 时，其拉普拉斯变换为1，因此系统方程也是输入为冲激函数时的系统输出。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><h4 id="策动点方程"><a href="#策动点方程" class="headerlink" title="策动点方程"></a>策动点方程</h4><p>当系统是一个单口网络（One-port network，输入和输出在同一个端口的系统）时，系统方程称为策动点方程(Driving point function)。对于电路分析，单口网络的系统方程可以是 $H(s) = \frac{I(s)}{V(s)}$，也可以是 $H(s) = \frac{V(s)}{I(s)}$。</p><h4 id="传递函数"><a href="#传递函数" class="headerlink" title="传递函数"></a>传递函数</h4><p>当系统是一个两口网络时，此时的系统方程称为传递函数（Transfer function）。分析时需要找到电路的输入和输出，作比即可得到传递函数。</p><h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><h4 id="并联"><a href="#并联" class="headerlink" title="并联"></a>并联</h4><p>如果两个系统并联，新的系统方程为：$h(t) = h_1(t) + h_2(t)$，在s域内：</p><script type="math/tex; mode=display">H(s) = H_1(s) + H_2(s)</script><h4 id="串联-级联"><a href="#串联-级联" class="headerlink" title="串联/级联"></a>串联/级联</h4><p>如果两个系统串联，新的系统方程为：$h(t) = h_1(t) * h_2(t)$，在s域内：</p><script type="math/tex; mode=display">H(s) = H_1(s)H_2(s)</script><p>举例：放大器的并联和串联</p><h2 id="系统方程的结构"><a href="#系统方程的结构" class="headerlink" title="系统方程的结构"></a>系统方程的结构</h2><p>如之前提到的拉普拉斯反变换和z反变换，由于系统输入和输出在s域内都以多项式表示，系统方程自然是两个多项式的比值：</p><script type="math/tex; mode=display">H(s) = \frac{R(s)}{E(s)} = K \frac{\Pi(s - z_i)}{\Pi(s - p_k)}</script><p>其中$p_i$称为系统方程的极点，$z_k$称为系统方程的零点。</p><p>在电路分析中，极点描述的对象是电路中电容和电感的个数，即系统方程的阶数。</p><p>同理，离散系统的方程也可以写作两个多项式的比：</p><script type="math/tex; mode=display">H(z) = \frac{\sum b_r z^{-r}}{\sum a_k z^{-k}} = A_0 + \sum \frac{A_k z}{z - p_k}</script><h3 id="强迫响应和自由响应"><a href="#强迫响应和自由响应" class="headerlink" title="强迫响应和自由响应"></a>强迫响应和自由响应</h3><p>如果将系统的输入$E(s)$以多项式表示：$E(s) = \frac{\Pi(s - z_i)}{\Pi s - p_k}$，系统方程$H(s) = \frac{\Pi(s - z_j)}{\Pi s - p_i}$，由系统的零输入响应$R(s) = E(s)H(s)$：</p><script type="math/tex; mode=display">R(s) = \sum \frac{A_k}{s - p_k} + \sum \frac{A_i}{s - p_i}</script><p>经过拉普拉斯反变换：</p><script type="math/tex; mode=display">r(t) = \sum A_k e^{p_k t} u(t) + \sum A_i e^{p_i t} u(t)</script><p>可以发现$r(t)$受到两部分的影响：系统方程和输入信号：称$r(t)$受输入影响的部分为强迫响应，受系统方程影响的部分为自由响应。</p><h3 id="瞬态响应和稳态响应"><a href="#瞬态响应和稳态响应" class="headerlink" title="瞬态响应和稳态响应"></a>瞬态响应和稳态响应</h3><p>分析时域中的$r(t)$构成，表达式的常数项不会受到$t$变化的影响，$r(t)$的常数项称为稳态响应。$r(t)$中受到$t$影响的部分称为瞬态响应。</p><h3 id="系统稳定性"><a href="#系统稳定性" class="headerlink" title="系统稳定性"></a>系统稳定性</h3><h4 id="s域图像"><a href="#s域图像" class="headerlink" title="s域图像"></a>s域图像</h4><p>由 $s = \sigma + j\omega$, 因此可以将任何一个值在以实部 $\sigma$ 为横轴，虚部 $j\omega$ 为纵轴的 s 域中的一个点来表示。<br>在 s 域图像中，系统方程的极点以 $\times$ 表示，系统方程的零点以 $\bigcirc$ 表示。</p><h4 id="连续系统的稳定性"><a href="#连续系统的稳定性" class="headerlink" title="连续系统的稳定性"></a>连续系统的稳定性</h4><p>在时域中有：</p><script type="math/tex; mode=display">\int |h(t)| dt < \infty</script><p>满足上述条件的系统是稳定系统。</p><p>在 s 域中，如果所有的极点都在 s 域图像的左侧，即 $\sigma &lt; 0$，满足系统稳定的条件。当所有极点都在虚轴上且为一阶时，这个系统是严格的稳定系统。</p><p><img src="https://freeimghost.com/images/2025/06/23/20210531130659.png" alt="code"></p><h4 id="离散系统的稳定性"><a href="#离散系统的稳定性" class="headerlink" title="离散系统的稳定性"></a>离散系统的稳定性</h4><p>由$z=e^{sT}$，当$s=0$时，$z=1$，因此如果极点在z域的单位圆内，离散系统是稳定系统，在单位圆外，系统是非稳定系统。<br><img src="https://freeimghost.com/images/2025/06/23/20210531133708.png" alt="code"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统06</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F06/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F06/</url>
      
        <content type="html"><![CDATA[<h1 id="Z变换"><a href="#Z变换" class="headerlink" title="Z变换"></a>Z变换</h1><h2 id="Z变换的基本原理"><a href="#Z变换的基本原理" class="headerlink" title="Z变换的基本原理"></a>Z变换的基本原理</h2><p>z变换的本质是通过采样使得离散信号可以被拉普拉斯变换，因此z变换的对象是离散信号/序列。<br>其具体过程如下：<br>由第六讲中提到的采样定理，对于连续序列x(t)，对其做自然采样：</p><script type="math/tex; mode=display">x_s(t) = x(t)\delta_T(t) \\= x(t)\sum \delta(t-nT) \\= \sum x(nT)\delta(t-nT)</script><p>对其做拉普拉斯变换：</p><script type="math/tex; mode=display">X_s = L[x_s(t)]</script><script type="math/tex; mode=display">L[x_s(t)] = L[\sum x(nT)\delta(t-nT)] \\= \sum x(nT)L[\delta(t-nT)] \\= \sum x(nT)e^{-snT}</script><p>令$z=e^{sT}$，得到z变换的定义式：</p><script type="math/tex; mode=display">X(z) = \sum x(n)z^{-n}</script><p>在LTI系统中$n &gt; 0$，z变换的定义式可以写作：</p><script type="math/tex; mode=display">X(z) = \sum_{n=0}^{\infty} x(n)z^{-n}</script><h2 id="存在条件-收敛域"><a href="#存在条件-收敛域" class="headerlink" title="存在条件/收敛域"></a>存在条件/收敛域</h2><p>使得序列$x(n)$能够被z变换的条件是序列$x(n)$收敛，即：</p><script type="math/tex; mode=display">\sum |x(n)z^{-n}| < \infty</script><p>上述条件为z变换的收敛域。</p><h2 id="Z反变换"><a href="#Z反变换" class="headerlink" title="Z反变换"></a>Z反变换</h2><p><strong>Z变换式的一般形式</strong><br>序列$x(n)$的z变换式$X(z)$的一般形式可以写作由两个多项式组成的分式：</p><script type="math/tex; mode=display">X(z) = \frac{N(z)}{D(z)} = \frac{\sum b_mz^m}{\sum a_nz^n}</script><p>当极点为一阶时,对等式两边同时除以z以提取常系数A:</p><script type="math/tex; mode=display">\frac{X(z)}{z} = \sum_{i=1}^{N} \frac{A_i}{z - z_i}</script><p>其中$A<em>i = (z - z_i) \frac{X(z)}{z} |</em>{z = z_i}$<br>再乘上z:</p><script type="math/tex; mode=display">X(z) = \sum_{i=1}^{N} \frac{A_i z}{z - z_i}</script><p>其中$A_i$为$x(n)$的常系数，$z_i$为底数。 对应的$x(n)$:</p><script type="math/tex; mode=display">x(n) = \sum_{i=0}^{\infty} A_i (z_i)^n, n \geq 0</script><p>另外两种关于$X(z)$极点结构的情况:</p><ol><li>共轭复数</li><li>多根<br>本节不会讨论</li></ol><h1 id="Z变换的性质"><a href="#Z变换的性质" class="headerlink" title="Z变换的性质"></a>Z变换的性质</h1><ol><li>线性（同傅里叶变换）</li></ol><p>线性需要要求两个序列收敛域有公共部分，如果两者没有公共收敛域，那么无法Z变换不具有线性。</p><ol><li>变换操作</li></ol><ul><li><p>双侧时移<br>时移前后信号形状保持不变。<br>右移: $Z[x(n - m)] = z^{-m} X(z)$<br>左移: $Z[x(n + m)] = z^{m} X(z)$</p></li><li><p>单侧时移<br>时移后图像$n &lt; 0$的部分被消去。<br>右移:$Z[x(n - m)u(n)] = z^{-m} [X(z) - \sum<em>{k=1}^{k-m} x(k) z^{-k}]$<br>左移:$Z[x(n + m)u(n)] = z^{m} [X(z) - \sum</em>{k=0}^{m-1} x(k) z^{-k}]$</p></li><li><p>线性权重</p></li></ul><script type="math/tex; mode=display">Z[nx(n)]= -z\frac{dX(z)}{dz} = -z^{-1}\frac{dX(z)}{dz^{-1}}</script><ul><li>尺度变换（z频域）<script type="math/tex; mode=display">Z[a^{n}x(n)] = X(\frac{z}{a})</script><h2 id="初值定理"><a href="#初值定理" class="headerlink" title="初值定理"></a>初值定理</h2>如果$x(n)$具有因果性且可以被Z变换，有：<script type="math/tex; mode=display">x(0) = \lim_{x \to \infty} X(z)</script><h2 id="终值定理"><a href="#终值定理" class="headerlink" title="终值定理"></a>终值定理</h2>如果$x(n)$具有因果性且可以被Z变换，有：<script type="math/tex; mode=display">\lim_{x \to \infty} x(n) = \lim_{z \to 1}[(z-1)X(z)]</script><h2 id="卷积理论"><a href="#卷积理论" class="headerlink" title="卷积理论"></a>卷积理论</h2><script type="math/tex; mode=display">Z[x(n)*h(n)] = X(z)H(z)</script><script type="math/tex; mode=display">Z[x(n)h(n)] = X(z)*H(z)</script>收敛域为两者的公共收敛域：$max(R<em>{xmin}, R</em>{hmin}) &lt; |z| &lt; min(R<em>{xmax}, R</em>{hmax})$<h1 id="常见信号的Z变换"><a href="#常见信号的Z变换" class="headerlink" title="常见信号的Z变换"></a>常见信号的Z变换</h1><h2 id="单位冲激序列"><a href="#单位冲激序列" class="headerlink" title="单位冲激序列"></a>单位冲激序列</h2><script type="math/tex; mode=display">Z[\delta(n)] = \sum \delta(n)z^{-n} = 1</script></li></ul><p>收敛域：整个z域</p><h2 id="单位阶跃序列"><a href="#单位阶跃序列" class="headerlink" title="单位阶跃序列"></a>单位阶跃序列</h2><script type="math/tex; mode=display">\begin{aligned}Z[u(n)] &= \sum u(n)z^{-n} \\&= 1 + z^{-1} + z^{-2} + \ldots + z^{-n} \\&= \frac{z}{z-1}\end{aligned}</script><p>收敛域：|z| &gt; 1</p><h2 id="斜坡序列"><a href="#斜坡序列" class="headerlink" title="斜坡序列"></a>斜坡序列</h2><p>由单位阶跃序列的变换对：$Z[u(n)] = \sum_{n=0}^{\infty} z^{-n} = \frac{z}{z-1}$ 求导</p><script type="math/tex; mode=display">\begin{aligned}&\left(\sum_{n=0}^{\infty} z^{-n}\right)' = \left(\frac{z}{z-1}\right)' \\-&\sum_{n=0}^{\infty} nz^{-n+1} = -\frac{1}{(1-z^{-1})^2} \\&\sum_{n=0}^{\infty} nz^{-n+1} = \frac{1}{(1-z^{-1})^2} \\\text{两边同时乘以 } z^{-1}: &\quad Z[nu(n)] = \frac{z}{(z-1)^2}\end{aligned}</script><p>收敛域：|z| &gt; 1<br>推广：</p><script type="math/tex; mode=display">Z[n^m x(n)] = \left[z^{-1} \frac{d}{dz^{-1}}\right]^m X(z)</script><h2 id="指数序列"><a href="#指数序列" class="headerlink" title="指数序列"></a>指数序列</h2><script type="math/tex; mode=display">\begin{aligned}Z[a^n u(n)] &= \sum a^n z^{-n} \\&= \sum \left(\frac{a}{z}\right)^n \\&= \lim_{n \to \infty} \frac{1 - \left(\frac{a}{z}\right)^{n+1}}{1 - \frac{a}{z}}\end{aligned}</script><p>当 $|\frac{a}{z}| &lt; 1$ 时序列收敛，此时可以简化为：</p><script type="math/tex; mode=display">Z[a^n u(n)] = \frac{z}{z-a}</script><p>收敛域：|z| &gt; |a|</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统05</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F05/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F05/</url>
      
        <content type="html"><![CDATA[<h1 id="拉普拉斯变换"><a href="#拉普拉斯变换" class="headerlink" title="拉普拉斯变换"></a>拉普拉斯变换</h1><h2 id="傅里叶变换的局限性"><a href="#傅里叶变换的局限性" class="headerlink" title="傅里叶变换的局限性"></a>傅里叶变换的局限性</h2><p>1.使用傅里叶变换的条件是(f(t))必须要满足狄利赫里条件，即必须要满足有界、绝对可积和有有限个间断点三个条件。 有些信号并不满足绝对可积的条件，因此这些信号不能被应用傅里叶变换。<br>2.傅里叶变换中的无穷积分比较困难。<br>对于不满足狄利赫里条件的信号，可以用拉普拉斯变换进行处理。</p><h2 id="拉普拉斯变换的基本原理"><a href="#拉普拉斯变换的基本原理" class="headerlink" title="拉普拉斯变换的基本原理"></a>拉普拉斯变换的基本原理</h2><p>拉普拉斯变换的基本思想是将 $f(t)$ 乘上一个衰减系数： $AF$ (Attenuation factor) 以改善 $f(t)$ 的收敛性，使得 $f(t)AF$ 满足狄利赫里条件。<br>通用的衰减系数是 $e^{-\sigma t}$。<br>因此 $f(t)AF$ 的傅里叶变换写作：</p><script type="math/tex; mode=display">F(\omega) = F[(f(t)e^{-\sigma t})] = \int f(t)e^{-\sigma t}e^{-j\omega t}dt = \int f(t)e^{-(\sigma+j\omega)t}dt</script><p>令 $s = (\sigma+j\omega)$，得到拉普拉斯变换的定义式：</p><script type="math/tex; mode=display">L[f(t)] = F(s) = F(\sigma+j\omega) = \int f(t)e^{-st}dt</script><p>对于 LTI 系统，$f(t) = 0, t &lt; 0$，因此：</p><script type="math/tex; mode=display">L[f(t)] = F(s) = \int_0^\infty f(t)e^{-st}dt</script><p><strong>存在条件/收敛域</strong><br>保证拉普拉斯变换存在的条件是 $f(t)AF$ 满足满足狄利赫里条件。使得拉普拉斯变换成立的定义域称为收敛域 (RoC)。其应当是使得 $F(s)$ 存在的 $s$ 的范围。即 $f(t)$ 应当满足：</p><script type="math/tex; mode=display">\lim_{t \to \infty} f(t)e^{-\sigma t} = 0</script><p><strong>拉普拉斯反变换</strong><br>傅里叶反变换的定义式：</p><script type="math/tex; mode=display">f(t) = \frac{1}{2\pi} \int F(\omega)e^{j\omega t}d\omega</script><p>带入 $f(t)e^{-\sigma t}$：</p><script type="math/tex; mode=display">f(t)e^{-\sigma t} = \frac{1}{2\pi} \int F(\sigma+j\omega)e^{j\omega t}d\omega</script><p>将两边同时乘上 $e^{\sigma t}$：</p><script type="math/tex; mode=display">f(t) = \frac{1}{2\pi} \int F(\sigma+j\omega)e^{(\sigma+j\omega)t}d\omega</script><p>带入 $s = \sigma+j\omega$ 并替换积分域，得到拉普拉斯反变换的定义式：</p><script type="math/tex; mode=display">f(t)=\frac{1}{2\pi j}\int_{\sigma-j\infty}^{\sigma+j\infty}F(s)e^{st}ds</script><p>拉普拉斯变换对包含拉普拉斯变换和反变换的定义式。<br>拉普拉斯变换的一般形式和反变换求解<br>$f(t)$经拉普拉斯变换后的$F(s)$可以用多项式分数的形式进行表达：</p><script type="math/tex; mode=display">F(s)=\frac{A(s)}{B(s)}=\frac{\sum a_ms^m}{\sum b_ns^n}</script><p>倘若$m&lt;n$，则$F(s)$是一个真分数，可以上下做多项式除法，得到：</p><script type="math/tex; mode=display">F(s)=\frac{a_m(s-z_1)(s-z_2)L(s-z_m)}{b_n(s-p_1)(s-p_2)L(s-p_n)}</script><p>其中$z$表示$F(s)$的时域变换$f(t)$中的零点，$p$表示$F(s)$的时域变换$f(t)$中的指数系数，称为极点(Pole)。<br>真分数意味着$F(s)$在无穷处收敛的概率很大，因此拉普拉斯变换后的式子具有高稳定性的特点。<br>在单阶实数极点（Single-order real poles）的条件下：</p><script type="math/tex; mode=display">F(s)=\frac{A(s)}{(s-p_1)(s-p_2)L(s-p_n)}</script><p>那么$F(s)$经过多项式除法/因式分解之后可以写作：</p><script type="math/tex; mode=display">F(s)=\sum_{i=1}^{\frac{k_i}{s-p_i}}+L</script><p>可以得到：</p><script type="math/tex; mode=display">f(t)=\sum_{i=1}^n k_ie^{p_it}</script><p>另外两种关于$F(s)$极点的情况：</p><ol><li>共轭复数</li><li>多根<br>本节不会讨论</li></ol><h1 id="拉普拉斯变换的性质"><a href="#拉普拉斯变换的性质" class="headerlink" title="拉普拉斯变换的性质"></a>拉普拉斯变换的性质</h1><ol><li>线性（同傅里叶变换）</li><li>变换操作</li></ol><ul><li>时移特性（同傅里叶变换）</li><li>频移特性:$f(t)e^{-\alpha t}\rightarrow F(s+\alpha)$</li><li>尺度变换（同傅里叶变换）</li></ul><ol><li>积分和微分（时域）</li></ol><ul><li>微分</li><li>一阶微分:$\frac{df(t)}{dt}\rightarrow sF(s)-f(0_{-})$</li><li>二阶微分:$\frac{d^{2}f(t)}{dt^{2}}\rightarrow s[sF(s)-f(0<em>{-})]-f^{\prime}(0</em>{-})$</li><li>积分<script type="math/tex; mode=display">\int_{-\infty}^{t}f(\tau)d\tau\rightarrow\frac{F(s)}{s}+\frac{f^{(-1)}(0_{-})}{s}</script>证明过程是将积分域分解为$[-\infty,0]$（表示初始状态）和$[0,t]$两段。</li></ul><ol><li>积分和微分（频域）</li></ol><ul><li>n阶微分<script type="math/tex; mode=display">L[t^{n}f(t)]=(-1)^{n}\frac{d^{n}F(s)}{ds^{n}}</script></li><li>积分<script type="math/tex; mode=display">L[\frac{f(t)}{t}]=\int_{s}^{\infty}F(s)ds</script><strong>初值定理</strong><br>如果$f(t)$可积可被拉普拉斯变换，$f(t)$在$0_{+}$时刻的值（即初值）可以通过如下公式求得：<script type="math/tex; mode=display">f(0_{+})=lim_{s\rightarrow\infty}sF(s)</script><strong>终值定理</strong><br>如果$f(t)$可积可被拉普拉斯变换，$f(t)$在$\infty$时刻的值（即初值）可以通过如下公式求得：<script type="math/tex; mode=display">lim_{t\rightarrow\infty}f(t)=lim_{s\rightarrow0}sF(s)</script></li></ul><p><strong>卷积理论</strong></p><p>拉普拉斯变换的卷积理论与傅里叶变换的卷积理论大抵相同，但是要注意对于时域中乘法的变换在频域中卷积项的参数是$\frac{1}{2\pi i}$。</p><h1 id="拉普拉斯变换法求解系统微分方程"><a href="#拉普拉斯变换法求解系统微分方程" class="headerlink" title="拉普拉斯变换法求解系统微分方程"></a>拉普拉斯变换法求解系统微分方程</h1><h2 id="系统方程与全响应"><a href="#系统方程与全响应" class="headerlink" title="系统方程与全响应"></a>系统方程与全响应</h2><ol><li>以时域函数 $f(t)$ 的拉普拉斯变换 $F(s)$ 的微分特性：<blockquote><p>一阶微分：$\frac{df(t)}{dt} \rightarrow sF(s) - f(0<em>{-})$<br>二阶微分：$\frac{d^{2}f(t)}{dt^{2}} \rightarrow s[sF(s) - f(0</em>{-})] - f’(0_{-})$<br>可以将微分方程以拉普拉斯变换从时域变换至频域。<br>对于描述系统的微分方程将其做拉普拉斯变换：</p><script type="math/tex; mode=display">F_{out}(R(s),s) = F_{in}(E(s),s)</script></blockquote></li><li>带入初始条件和给定的题目条件中的一些 $r(t)$ 在特定时刻下的值，得到方程</li><li>解出频域内的 $R(s)$</li><li>用待定系数法展开多项式分式并用拉普拉斯反变换得到 $r(t)$<h2 id="零输入响应"><a href="#零输入响应" class="headerlink" title="零输入响应"></a>零输入响应</h2>法1<br>对于描述系统的微分方程，整理出关于 $R(s)$ 的等式：<script type="math/tex; mode=display">R(s) = F_{多项式分式}(r(t_{0}),s) + F_{多项式分式}(E(s),s)</script>其中含有某些初始状态 $r(t<em>{0})$ 的多项式分式是零输入响应，含有 $E(s)$ 的多项式分式是零状态响应。选取含有 $r(t</em>{0})$ 的多项式分式，带入初始状态即可得到零输入响应 $R<em>{zi}(s)$。<br>利用拉普拉斯反变换得到 $r</em>{zi}(t)$。<br>法2</li><li><p>令 $E(s) = 0$，重新写出此时的系统微分方程：</p><script type="math/tex; mode=display">F_{out}(R(s),s) = 0</script></li><li><p>带入初始条件和给定的题目条件中的一些 $r(t)$ 在特定时刻下的值，得到方程</p></li><li><p>解出频域内的 $R_{zi}(s)$</p></li><li><p>用待定系数法展开多项式分式并用拉普拉斯反变换得到 $r_{zi}(t)$</p><h2 id="零状态响应"><a href="#零状态响应" class="headerlink" title="零状态响应"></a>零状态响应</h2><p>法1<br>对于描述系统的微分方程，整理出关于$R(s)$的等式：</p><script type="math/tex; mode=display">R(s) = F_{多项式分式}(r(t_0), s) + F_{多项式分式}(E(s), s)</script><p>其中含有某些初始状态$r(t<em>0)$的多项式分式是零输入响应，含有$E(s)$的多项式分式是零状态响应。<br>选取带有系统输入$E(s)$的多项式分式，由$L(\delta(t)) \to 1$带入$E(s) = 1$，得到系统的零状态响应$R</em>{zs}(s)$。<br>利用拉普拉斯反变换得到$r<em>{zs}(t)$<br>法2<br>求解到$r(t)$与$r</em>{iz}(t)$后，利用</p><script type="math/tex; mode=display">r_{zs}(t) = r(t) - r_{iz}(t)</script><p>间接求解到$r_{zs}(t)$。</p><h1 id="用拉普拉斯变换分析电路"><a href="#用拉普拉斯变换分析电路" class="headerlink" title="用拉普拉斯变换分析电路"></a>用拉普拉斯变换分析电路</h1><p>将电路中主要元件的电压电流关系进行拉普拉斯变换：<br>电阻：</p><script type="math/tex; mode=display">R = \frac{V(s)}{I}</script><p>电容：<br>由时域：$v(t) = \frac{1}{C} \int i(t) dt$</p><script type="math/tex; mode=display">V(s) = I(s) \frac{1}{sC} + \frac{1}{s} v_c(0_-)</script><p>电容的阻抗（容抗）：</p><script type="math/tex; mode=display">Z_c = \frac{1}{sC}</script><p>电感：由时域：$v(t) = L \frac{di(t)}{dt}$</p><script type="math/tex; mode=display">V(s) = I(s) Ls - Li(0_-)</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统04</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F04/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F04/</url>
      
        <content type="html"><![CDATA[<h1 id="时域分析方法（微分-差分方程·卷积）"><a href="#时域分析方法（微分-差分方程·卷积）" class="headerlink" title="时域分析方法（微分/差分方程·卷积）"></a>时域分析方法（微分/差分方程·卷积）</h1><h2 id="微分-差分方程的解"><a href="#微分-差分方程的解" class="headerlink" title="微分/差分方程的解"></a>微分/差分方程的解</h2><script type="math/tex; mode=display">C_{0}\frac{d^{n}r(t)}{dt^{n}}+C_{1}\frac{d^{n-1}r(t)}{dt^{n-1}}+\ldots+C_{n}r(t)=E_{0}\frac{d^{m}e(t)}{dt^{m}}+E_{1}\frac{d^{m-1}e(t)}{dt^{m-1}}+\ldots+E_{m}e(t)</script><p>这个方程的解由齐次解和特解两部分组成，齐次解与特解的和构成方程的全解。</p><h3 id="齐次解"><a href="#齐次解" class="headerlink" title="齐次解"></a>齐次解</h3><p>当输入全部为0时，得到的方程：$C<em>{0}\frac{d^{n}r(t)}{dt^{n}}+C</em>{1}\frac{d^{n-1}r(t)}{dt^{n-1}}+\ldots+C_{n}r(t)=0$，称之为特征方程。</p><p>由特征方程得到的解称为齐次解。齐次解表示系统的零输入响应。</p><p><strong>求齐次解</strong></p><ol><li>将特征方程转化为多项式并求解。</li></ol><p>对于微分方程的特征方程，其$n$阶微分项可以被换元为$\alpha^{n}$项，最终将特征方程转化为关于$\alpha$的$n$阶多项式。</p><p>对于差分方程的特征方程，其$0$阶差分项$y(n)$可以被换元为关于$\alpha$的最高幂项，如此类推，最终将特征方程转化为关于$\alpha$的$n$阶多项式。</p><ol><li><p>根据多项式的解的个数和是否有重根，可以在下表中找到齐次解的形式，并带入多项式的解。</p></li><li><p>将齐次解带入已知方程的特解（通常是系统的零状态响应），利用对应阶数项系数相等，求出齐次解中的常系数。</p></li></ol><p>不同特征根所对应的齐次解（微分方程）</p><div class="table-container"><table><thead><tr><th>特征根</th><th>齐次解$y_{p}(t)$</th></tr></thead><tbody><tr><td>单实根</td><td>$e^{\alpha k}$</td></tr><tr><td>r重实根</td><td>$\sum C_{r-1}t^{r-1}e^{\alpha k}$</td></tr></tbody></table></div><p>不同特征根所对应的齐次解（差分方程）</p><div class="table-container"><table><thead><tr><th>特征根</th><th>齐次解$y_{p}(k)$</th></tr></thead><tbody><tr><td>单实根</td><td>$C\alpha^{k}$</td></tr><tr><td>r重实根</td><td>$\sum C_{r-1}k^{r-1}\alpha^{k}$</td></tr></tbody></table></div><p><strong>特解</strong></p><p>当激励为特定的值或者是函数时，方程的解称为特解。</p><p><strong>求特解</strong></p><ol><li>带入具体的激励e(t)到系统的微分/差分方程。</li><li>通过0阶项r(t)与激励中最高次数项之间系数的关系，用待定系数法猜想系统响应r(t)的结构。</li><li>将r(t)的结构代回微分/差分方程，利用对应阶数项系数相等建立方程，解出r(t)结构中的常系数。<br>如果已知了一些特解，求另一些特解，可以使用迭代法。<br>即从h(0)开始列出微分方程，直到列到所求的特解对应的微分方程，将已知的特解带入，从而求出未知的特解。<h3 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h3>\subsection*{零状态响应和零输入响应}<br>在第二讲中对零状态响应和零输入响应以及线性关系进行过介绍，值得注意的是：零状态响应 $r<em>{z s}(t)$ 和零输入响应 $r</em>{z i}(t)$ 是相互独立的，即任何的输入只会影响到零状态响应中t的取值，而不会影响零输入响应中t的取值。<br>零输入响应与系统方程的通解有关，零状态响应与系统方程的特解/非齐次解有关。<br>两者可以通过解非齐次的微分/差分方程得到，解微分/差分方程的通用方法是卷积。<h3 id="卷积方法"><a href="#卷积方法" class="headerlink" title="卷积方法"></a>卷积方法</h3>在连续系统中，定义 * 为卷积符号，定义卷积运算：<script type="math/tex; mode=display">g(t) = f(t) * h(t) = \int f(\tau) h(t - \tau) d\tau</script>由于任何信号都可以被分解为 $n$ 个宽为 $\tau$，高为 $f(n\tau)$ 的门信号，在 $\tau$ 非常小的时候可以认为 $gate(t) = u’(t) \Delta \tau = \delta(t)$，因此任何的信号都可以用与冲激信号的卷积来表示：<script type="math/tex; mode=display">f(t) = \int f(\tau) \delta(t - \tau) d\tau</script><h3 id="几何意义"><a href="#几何意义" class="headerlink" title="几何意义"></a>几何意义</h3>两个信号 $f(t)$ 和 $h(t)$ 卷积的几何意义是：将其中一个图像左右翻转，然后从 $t = 0$ 处向右平移，平移过程中两个函数图像重叠面积的变化即为卷积图像。<h3 id="计算性质"><a href="#计算性质" class="headerlink" title="计算性质"></a>计算性质</h3>基本性质：交换律，结合律，分配率。</li></ol><p>微分和积分特性：</p><script type="math/tex; mode=display">g'(t) = f'(t) * h(t) = f(t) * h'(t)</script><script type="math/tex; mode=display">g^{(n-m)}(t) = f^{(n)}(t) * h^{(-m)}(t) = f^{(-m)}(t) * h^{(n)}(t)</script><p>注：$g^{(n-m)}(t)$表示对$g(t)$作n次微分，m次积分。<br>与冲激函数或阶跃函数卷积</p><ol><li>$f(t) * \delta(t) = f(t)$</li><li>$f(t - t_0) * \delta(t - t_1) = f(t - t_0 - t_1)$</li><li>$f(t) * \delta’(t) = f’(t)$<h3 id="卷积和"><a href="#卷积和" class="headerlink" title="卷积和"></a>卷积和</h3>在离散系统中，定义卷积和：<script type="math/tex; mode=display">f(k) = \sum f(i) h(k - i)</script>任何的离散序列都可以用其自身与单位序列的卷积和表示：<script type="math/tex; mode=display">f(t) = \sum f(i) \delta(k - i) di</script>卷积和也同样满足如上的计算性质和一些特殊的卷积结果：<script type="math/tex; mode=display">x(k) * \delta(k) = x(k)</script><script type="math/tex; mode=display">x(k) * \delta(k - 1) = x(k - 1)</script></li></ol><h2 id="冲激响应和单位序列-取样响应"><a href="#冲激响应和单位序列-取样响应" class="headerlink" title="冲激响应和单位序列/取样响应"></a>冲激响应和单位序列/取样响应</h2><p>一个连续的LTI系统零状态下输入单位冲激函数δ(t)，所引起的响应称为单位冲激响应，记作h(t)。冲激响应是e(t)=δ(t)时微分方程的特解。<br>连续系统的零状态响应r_{zs}(t)可以表示为系统输入f(t)与单位冲击响应h(t)的卷积：</p><script type="math/tex; mode=display">r_{zs}(t) = f(t) * h(t)</script><p>一个离散的LTI系统零状态下输入单位序列δ(k)，所引起的响应称为单位取样响应，记作h(k)。连续系统的零状态响应r_{zs}(k)可以表示为系统输入f(k)与单位冲击响应h(k)的卷积：</p><script type="math/tex; mode=display">r_{zs}(k) = f(k) * h(k)</script><h2 id="阶跃响应"><a href="#阶跃响应" class="headerlink" title="阶跃响应"></a>阶跃响应</h2><p>一个LTI系统零状态下输入单位阶跃函数u(t)所引起的响应称为单位阶跃响应，记作g(t)。由u(t)=∫δ(t)dt，</p><script type="math/tex; mode=display">g(t) = \int_{-\infty}^{t} h(t) dt</script><p>卷积积分需要满足条件f<em>{1}(τ)f</em>{2}(t-τ)≠0，由于对阶跃函数u(t)，t&gt;0，因此阶跃响应通从用于决定卷积积分的上下限。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统03</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F03/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F03/</url>
      
        <content type="html"><![CDATA[<h1 id="频谱·非周期信号的傅里叶变换"><a href="#频谱·非周期信号的傅里叶变换" class="headerlink" title="频谱·非周期信号的傅里叶变换"></a>频谱·非周期信号的傅里叶变换</h1><h2 id="信号的频谱"><a href="#信号的频谱" class="headerlink" title="信号的频谱"></a>信号的频谱</h2><p>已经知道信号可以分解为一系列正弦信号或者是数字数信号的和。<br>以各分量（称为各谐波（Harmonics））对应的角频率为横坐标，以各分量的幅值或者是相位为纵坐标绘制图像，就能得到信号的频谱图像。<br>频谱分为两种，单边频谱（描述三角形式的傅里叶级数）和双边频谱（描述指数形式的傅里叶级数）。<br>要绘制其单边或双边的幅值频谱和相位频谱，才能够完整地描述一个傅里叶级数。<br>单边频谱和双边频谱的关系：<br>单边频谱的幅值是双边频谱的两倍：$A<em>{uni} = 2A</em>{bil} = \sqrt{a_n^2 + b_n^2}$<br>两者相位相同：$\phi_n = arctan(-\frac{b_n}{a_n})$。<br>例如下图中的三角形式傅里叶级数，可以用单边频谱表示后转换为图中的双边频谱。<br>周期矩形脉冲信号的频谱<br>对上图的周期脉冲信号求其傅里叶系数，得到：</p><script type="math/tex; mode=display">F(n\omega) = \frac{E\tau}{T_1}Sa(n\omega_1\frac{\tau}{2})</script><p>称相邻两个分量间的距离为谐波距离，谐波距离为$\omega_1$，函数与横轴的第一个交点为主瓣宽度：$\frac{2\pi}{\tau}$。<br>定义$\omega_1 = \frac{2\pi}{T_1}$, $T_1$为采样周期。可以发现主瓣宽度不变的前提下，$T_1$越大，谐波距离越小，谐波分布越稠密。当$T_1 \rightarrow \infty$时，整个频谱将趋于连续。<br>因此周期信号的频谱是离散的，非周期信号的频谱是连续的。</p><ul><li>周期信号的功率<br>归一化（R=1Ω）的周期信号的平均功率可以由如下的公式表示：<script type="math/tex; mode=display">P = \frac{1}{T}\int_0^T f(t)dt = \sum F(n\omega_1)^2</script><h2 id="傅里叶变换、反变换的推导"><a href="#傅里叶变换、反变换的推导" class="headerlink" title="傅里叶变换、反变换的推导"></a>傅里叶变换、反变换的推导</h2>对指数形式的傅里叶系数参数：<script type="math/tex; mode=display">F(n\omega_{1}) = \frac{1}{T}\int_{0}^{T} f(t)e^{-j n\omega_{1}t}dt</script>两边同时乘上周期：<script type="math/tex; mode=display">TF(n\omega_{1}) = \int_{0}^{T} f(t)e^{-j n\omega_{1}t}dt</script>当 $T \rightarrow \infty$ 时，左边 $TF(n\omega<em>{1})$ 是一个有界函数，此时频谱连续 $n\omega</em>{1} \rightarrow \omega$，定义频谱密度 $F(\omega)$：<script type="math/tex; mode=display">F(\omega) = lim_{T \rightarrow \infty} TF(n\omega_{1})</script><script type="math/tex; mode=display">= lim_{T \rightarrow \infty} \int_{0}^{T} f(t)e^{-j n\omega_{1}t}dt</script><script type="math/tex; mode=display">= \int f(t)e^{-j n\omega_{1}t}dt</script>定义傅里叶变换算子 $F[\cdot]$:<script type="math/tex; mode=display">F[\cdot] = \int \cdot e^{-j\omega_{1}t}dt</script>可得傅里叶变换：<script type="math/tex; mode=display">F[f(t)] = \int f(t)e^{-j\omega_{1}t}dt</script>变换后的结果一定可以表示为复指数形式：<script type="math/tex; mode=display">F(\omega) = |F(\omega)|e^{j\phi(\omega)}</script>称 $|F(\omega)|$ 为振幅，$\phi(\omega)$ 为相位角。<br>对傅里叶变换的指数形式变形：<script type="math/tex; mode=display">f(t) = \sum F(\omega_{1})e^{j\omega_{1}t}</script><script type="math/tex; mode=display">= \sum \frac{F(\omega_{1})}{\omega_{1}}\omega_{1}e^{j\omega_{1}t}</script>当 $T \rightarrow \infty$ 时，可证明 $lim<em>{T \rightarrow \infty} \frac{F(n\omega</em>{1})}{\omega_{1}} = \frac{F(\omega)}{2\pi}$，有：<script type="math/tex; mode=display">f(t) = \frac{1}{2\pi} \int F(\omega)e^{j\omega t} d\omega</script>将如上式子定义为傅里叶反变换。<br>因此：<br>傅里叶变换：$F[f(t)] = \int f(t)e^{-j\omega_1t}dt$<br>傅里叶反变换：$f(t) = \frac{1}{2\pi} \int F(\omega)e^{j\omega t}d\omega$<br>此外应用奇偶分解和欧拉公式可以将傅里叶变换分解为：<script type="math/tex; mode=display">F(\omega) = 2\int f_e(t)\cos\omega tdt - 2j\int f_0(t)\sin\omega tdt</script><h2 id="傅里叶变换的性质"><a href="#傅里叶变换的性质" class="headerlink" title="傅里叶变换的性质"></a>傅里叶变换的性质</h2></li></ul><ol><li>$f(-t) \rightarrow F(-\omega)$</li><li>$f(-t) \rightarrow F^*(\omega)$</li><li>线性</li><li>对偶性：$F(t) \rightarrow 2\pi f(-\omega)$</li><li>变换操作：</li></ol><ul><li>尺度变换：$f(at) \rightarrow \frac{1}{|a|}F(\frac{\omega}{a})$</li><li>时移：$f(t-t_0) \rightarrow F(\omega)e^{-j\omega t_0}$</li><li>综合：$f(at+b) = f(a(t+b/a)) \rightarrow \frac{1}{|a|}F(\frac{\omega}{a})e^{-j\omega\frac{b}{a}}$</li><li>频移：$F(\omega+\omega_0) \rightarrow f(t)e^{-j\omega_0t}$</li></ul><ol><li>导数：</li></ol><ul><li>时域倒数：$f’(t) \rightarrow j\omega F(\omega)$</li><li>频域导数：$F’(\omega) \rightarrow -jf(t)$</li></ul><ol><li>积分：</li></ol><ul><li>时域积分：$\int f(t)dt = \pi F(0)\delta(\omega) + \frac{F(\omega)}{j\omega}$</li></ul><h2 id="常见非周期信号的傅里叶变换"><a href="#常见非周期信号的傅里叶变换" class="headerlink" title="常见非周期信号的傅里叶变换"></a>常见非周期信号的傅里叶变换</h2><h3 id="方波-门函数"><a href="#方波-门函数" class="headerlink" title="方波/门函数"></a>方波/门函数</h3><script type="math/tex; mode=display">f(t)=E,-\frac{\tau}{2} 运用f(t)只在振幅处有值,因此:$$F(\omega)=\int_{-\frac{\tau}{2}}^{\frac{\tau}{2}} Ee^{-j\omega t}dt$$$$=E_{T}Sa(n\frac{\omega\tau}{2})</script><p>直流信号<script type="math/tex">f(t)=E</script>由于直流信号不满足狄利克雷条件中的绝对可积,因此需要考虑其他方法对其做变换。<br>当门函数的$\tau\rightarrow\infty$时,可以将门函数视作一个直流信号函数。</p><script type="math/tex; mode=display">F(\omega)=\lim_{\tau\rightarrow\infty}\int_{-\tau}^{\tau} Ee^{-j\omega t}dt$$$$=E\lim_{\tau\rightarrow\infty}\frac{2sin(\omega\tau)}{\omega}</script><script type="math/tex; mode=display">=2\pi E\delta(\omega)</script><p>当$E=1$时,可以推导出</p><script type="math/tex; mode=display">F(\omega)=2\pi\delta(\omega)</script><p>单位冲激函数</p><script type="math/tex; mode=display">F(\omega)=\int\delta(t)e^{-j\omega t}dt=1</script><p>单位冲击偶函数</p><script type="math/tex; mode=display">F(\omega)=\int\delta'(t)e^{-j\omega t}dt=j\omega</script><p>单侧指数函数</p><script type="math/tex; mode=display">f(t)=Ee^{-\alpha t}u(t)</script><script type="math/tex; mode=display">F(\omega)=\int Ee^{-\alpha t}u(t)dt</script><script type="math/tex; mode=display">=\int_{0}^{\infty} Ee^{-\alpha t}dt</script><script type="math/tex; mode=display">=\frac{E}{\alpha+j\omega}</script><p>对其做复指数变换，就能得到其振幅和相位角：</p><script type="math/tex; mode=display">F(\omega)=\frac{E(\alpha-j\omega)}{\alpha^{2}+\omega^{2}}</script><script type="math/tex; mode=display">=\frac{E}{\sqrt{(\alpha^{2}+\omega^{2})}}e^{-j\arctan\frac{\omega}{\alpha}}</script><p>符号函数</p><script type="math/tex; mode=display">sgn(t)=\begin{cases}1, t>0 \\ -1, t<0\end{cases}</script><p>由于不满足狄利克雷条件中的绝对可积（在t=0处不可积），因此需要对函数做变换，使其可积。<br>设$f_{1}(t)=sgn(t)e^{-\alpha|t|}$</p><script type="math/tex; mode=display">F(\omega)=\lim_{\alpha\to0}[\int_{-\infty}^{0}-e^{\alpha t}-j\omega t dt+\int_{0}^{\infty}e^{-\alpha t}-j\omega t dt]</script><script type="math/tex; mode=display">=-\lim_{\alpha\to0}\frac{2j\omega}{\alpha^{2}+\omega^{2}}</script><script type="math/tex; mode=display">=\frac{2}{j\omega}</script><p>复指数形式：</p><script type="math/tex; mode=display">F(\omega)=\frac{2}{|\omega|}e^{\pm\frac{\pi}{2}j}</script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统02</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F02/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F02/</url>
      
        <content type="html"><![CDATA[<h1 id="信号的傅里叶级数"><a href="#信号的傅里叶级数" class="headerlink" title="信号的傅里叶级数"></a>信号的傅里叶级数</h1><h2 id="信号变换"><a href="#信号变换" class="headerlink" title="信号变换"></a>信号变换</h2><p>分解、响应、叠加是信号与系统中最基础的信号处理方式。对信号的变换思路来源于时域内的信号 $f(t)$ 是以时间为变量的函数方程，在时域内噪声和有用信号往往是同时发生的，难以将噪声从信号中剥离，因此需要对信号进行变换，将信号从时域变换到频域（以频率为自变量的空间，频域中的信号可以表示为 $H(\omega)$），通过频率的不同就能利用滤波器将噪声剥离。</p><h2 id="正交分解"><a href="#正交分解" class="headerlink" title="正交分解"></a>正交分解</h2><h3 id="正交函数与正交函数集"><a href="#正交函数与正交函数集" class="headerlink" title="正交函数与正交函数集"></a>正交函数与正交函数集</h3><p>在信号领域，如果两个信号在 $(t<em>1, t_2)$ 内有 $\int</em>{t_1}^{t_2} f_1(t) f_2(t) dt = 0$，称两个信号是正交的。<br>如果有 $n$ 个函数构成的函数集：${\phi_1(t), \ldots, \phi_n(t)}$ 在 $(t_1, t_2)$ 内有：</p><script type="math/tex; mode=display">\int_{t_1}^{t_2} \phi_i(t) \phi_j(t) dt = \begin{cases}0, i \neq j \\K_i \neq 0, i = j\end{cases}</script><p>称这是一个正交函数集。<br>如果在这个函数集以外找不到任何的另外一个函数满足其与集内函数两两正交，称这个函数集是一个完备的正交函数集。<br>三角函数集 ${1, cos n \Omega t, sin n \Omega t}$ 就是一个完备的正交函数集。</p><h3 id="信号的正交分解"><a href="#信号的正交分解" class="headerlink" title="信号的正交分解"></a>信号的正交分解</h3><p>正交分解是最简单的一种信号分解方式，任何一个函数 $f_1(t)$ 都可以用 $n$ 个两两正交的函数的线性组合来近似。 有：</p><script type="math/tex; mode=display">f_1(t) = \sum C_i \phi_i(t) + f_e(t)</script><p>这样的分解方式称为信号的正交分解，即将目标信号 $f_1(t)$ 分解为若干个正交信号的线性组合和误差信号 $f_e(t)$，简化表示方法：</p><script type="math/tex; mode=display">f_2(t) = \sum C_i \phi_i(t)</script><p>此时的 $f_2(t)$ 不在具有限定性，是一个任意的函数。进一步得到任何一个信号 $f_1(t)$ 都可以用一个加权的信号 $f_2(t)$ 与误差信号 $f_e(t)$ 表示：</p><script type="math/tex; mode=display">f_1(t) = C_{12} f_2(t) + f_e(t)</script><p>$C_{12}$ 是 $f_2(t)$ 的权重，称为相关系数。 $f_e(t)$ 是拟合误差。</p><p>判断拟合是否准确的标准是拟合误差的均方值，当拟合误差的均方值最小时，信号拟合度最高，均方值表示为：</p><script type="math/tex; mode=display">\overline{\epsilon^{2}}=f_{\overline{\epsilon}}^{2}(t)=\frac{1}{t_{2}-t_{1}}\int_{t_{1}}^{t_{2}}f_{\epsilon}^{2}(t)dt</script><p>对其求导令方程等于0，可以解出：</p><script type="math/tex; mode=display">\int_{t_{1}}^{t_{2}}\frac{d}{dC_{12}}[f_{1}^{2}(t)-2C_{12}f_{2}(t)f_{1}(t)+f_{2}^{2}(t)C_{12}^{2}]dt=0</script><p>要使方程为0，必须每一项都为0，最终解得：</p><script type="math/tex; mode=display">C_{12}=\frac{\int_{t_{1}}^{t_{2}}f_{1}(t)f_{2}(t)dt}{\int_{t_{1}}^{t_{2}}f_{2}^{2}(t)dt}</script><p>但是正交分解依赖于$f<em>{2}(t)$的选取，如果于$f</em>{2}(t)$选取的不恰当，拟合度往往不高，在分解时容易丢失$f<em>{1}(t)$中有用的信息，因此需要其他更加准确的方法对信号进行分解。通过数学方法可知，当$f</em>{2}(t)$是一个完备正交集的线性组合时，此时的拟合效果是最好的。</p><h2 id="信号的傅里叶级数-1"><a href="#信号的傅里叶级数-1" class="headerlink" title="信号的傅里叶级数"></a>信号的傅里叶级数</h2><p>周期信号$f(t)$在一个周期内可以展开为在完正交信号空间中的无穷级数。而三角函数集正好就是一个完备正交集，因此将信号分解为三角函数集是一种理想的正交分解方法。高等数学中，任何满足有界可积，有有限个间断点（狄利赫里条件）的函数都可以被描述为傅里叶级数：</p><script type="math/tex; mode=display">f(t)=a_{0}+\sum_{n=1}^{\infty}[a_{n}cos(n\omega_{1}t)+b_{n}sin(n\omega_{1}t)]</script><p>在信号中，$a_{0}$称为直流分量，是函数在周期内的均值。</p><script type="math/tex; mode=display">a_{0}=\frac{1}{T}\int_{t_{0}}^{t_{0}+T}f(t)dt</script><p>有时定义傅里叶级数的第一项为$\frac{a<em>{0}}{2}$，此时$a</em>{0}=\frac{2}{T}\int<em>{t</em>{0}}^{t<em>{0}+T}f(t)dt$。<br>$a</em>{n}$称为基波分量，是一个偶函数:</p><script type="math/tex; mode=display">a_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)cos(n\omega_{1}t)dt</script><p>$b_{n}$称为谐波分量，是一个奇函数:</p><script type="math/tex; mode=display">b_{n}=\frac{2}{T}\int_{t_{0}}^{t_{0}+T}f(t)sin(n\omega_{1}t)dt</script><h3 id="傅里叶级数的三角变形"><a href="#傅里叶级数的三角变形" class="headerlink" title="傅里叶级数的三角变形"></a>傅里叶级数的三角变形</h3><ul><li>余弦函数形式<script type="math/tex; mode=display">f(t)=c_{0}+\sum_{n=1}^{\infty}c_{n}cos(n\omega_{1}t+\phi_{n})</script>其中$c<em>{0}=a</em>{0},c<em>{n}=\sqrt{a</em>{n}^{2}+b<em>{n}^{2}},\phi</em>{n}=arctan(-\frac{b<em>{n}}{a</em>{n}})$。<br>参数</li><li>幅值<script type="math/tex; mode=display">|F(n\omega_{1})|=\sqrt{a_{n}^{2}+b_{n}^{2}}</script></li><li>相位<script type="math/tex; mode=display">\phi_{n}=arctan(-\frac{b_{n}}{a_{n}})</script><h3 id="傅里叶级数的指数形式"><a href="#傅里叶级数的指数形式" class="headerlink" title="傅里叶级数的指数形式"></a>傅里叶级数的指数形式</h3>周期函数能够被分解为指数信号的线性组合，因此:<script type="math/tex; mode=display">f(t)=\sum F(n\omega_{1})e^{jn\omega_{1}t}</script>其中:<script type="math/tex; mode=display">F(n\omega_{1})=\frac{1}{T}\int_{0}^{T}f(t)e^{-jn\omega_{1}t}dt</script>代入欧拉公式:<script type="math/tex; mode=display">F(n\omega_{1})=\frac{1}{T}\int_{0}^{T}f(t)cos(n\omega_{1}t)-jf(t)sin(n\omega_{1}t)dt</script>可以得到</li></ul><p>$F(n\omega<em>{1})=\frac{1}{2}(a</em>{n}-jb_{n})$</p><p>$a<em>{n}=F</em>{n}+F_{-n}$</p><p>$b<em>{n}=j(F</em>{n}-F_{-n})$</p><p>需要注意的是负的频率/角频率$-\omega_{1}$实际并不存在，只用作数学分析。</p><p><strong>参数</strong></p><ul><li>幅值</li></ul><p>$|F(n\omega<em>{1})|=\frac{1}{2}\sqrt{a</em>{n}^{2}+b_{n}^{2}}$</p><p>指数形式的幅值是三角形式幅值的$\frac{1}{2}$。</p><p>指数形式的傅里叶级数的幅值函数是一个偶函数。</p><ul><li>相位</li></ul><p>$\phi<em>{n}=arctan(-\frac{b</em>{n}}{a_{n}})$</p><p>指数形式的傅里叶级数的相位函数是一个奇函数。</p><p>奇偶周期函数的傅里叶级数</p><p>只需要将奇偶性带入$a<em>{n},b</em>{n}$即可。</p><p>对于奇谐/偶谐函数则需要分$n$的奇偶性进行讨论。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>信号与系统01</title>
      <link href="/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F01/"/>
      <url>/2025/06/22/%E4%BF%A1%E5%8F%B7%E4%B8%8E%E7%B3%BB%E7%BB%9F01/</url>
      
        <content type="html"><![CDATA[<h1 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h1><h2 id="系统的类型"><a href="#系统的类型" class="headerlink" title="系统的类型"></a>系统的类型</h2><p>系统可以用数学模型和框图来表示。<br>系统 $H[\cdot]$ 的基本数学模型是：</p><script type="math/tex; mode=display">y(\cdot)=H[f(\cdot)]</script><p>称 $y(\cdot)$ 是系统的输出，$f(\cdot)$ 是系统的输入。因此对输入的处理与系统本身无任何关系。<br>按照系统的数学模型类型，系统可以分为即时系统（输出（称为系统的响应）仅与当前的输入（称为系统的激励）有关）和动态系统（响应与过去和现在的激励都有关系），离散系统（激励和响应都是离散信号）和连续系统（激励和响应都是连续信号）。</p><p>本课程主要讨论动态系统。</p><h2 id="系统的框图模型"><a href="#系统的框图模型" class="headerlink" title="系统的框图模型"></a>系统的框图模型</h2><p>表示系统基本功能的常用单元有：积分器（连续）／延迟单元（离散），加法器，数乘器，延时器。它们的框图如下图（《信号与线性系统分析》）所示。</p><p>通常的系统方程是左边为系统的输出结果，右边为系统的输入结果。<br>给定已知框图，写出对应的方程的流程通常是：<br>1．找到系统中的数个加法器，通过分析加法器的来源信号列出等式。<br>2．将等式进行处理，最终得到 $f(t)$ 与 $y(t)$ 的方程。</p><h2 id="线性时不变系统的特性"><a href="#线性时不变系统的特性" class="headerlink" title="线性时不变系统的特性"></a>线性时不变系统的特性</h2><h3 id="线性"><a href="#线性" class="headerlink" title="线性"></a>线性</h3><p>线性包含两个内容：齐次性和可加性。<br>若系统满足：</p><script type="math/tex; mode=display">H[a f(\cdot)] = a H[f(\cdot)]</script><p>称系统 $H(\cdot)$ 具有齐次性。<br>若系统满足：</p><script type="math/tex; mode=display">H[f_1(\cdot) + f_2(\cdot)] = H[f_1(\cdot)] + H[f_2(\cdot)]</script><p>称系统 $H(\cdot)$ 具有可加性。<br>若以上两点系统 $H(\cdot)$ 都满足，即：</p><script type="math/tex; mode=display">H[C_1 f_1(\cdot) + C_2 f_2(\cdot)] = C_1 H[f_1(t)] + C_2 H[f_2(t)]</script><p>称系统是线性的。<br><strong>动态系统的线性判别</strong><br>动态系统的响应 $y(\cdot)$ 与初始状态 $x(0)$ 和系统激励 $f(\cdot)$ 相关，称输入信号为 0（$f(t) = 0$）时，仅有初始状态引起的响应叫零输入响应 $y<em>{\mathrm{zi}}$；初始状态为 0（$x(0) = 0$）时，仅由输入信号引起的响应叫零状态响应 $y</em>{\mathrm{zs}}$。线性系统的全响应可以分解为这两种响应，称为线性系统的分解特性。<br>如果系统有多个初始状态或/和多个输入信号，对于每一个输入的零状态响应和对于每一个零输入响应都呈现线性，称为零状态/零输入线性。<br>如果一个系统具有分解特性、零状态/零输入线性特性，则该系统是线性系统。因此求解一个动态系统是否是线性系统的步骤：</p><ol><li>判断系统的零状态响应和零输入响应，将其相加判断是否满足分解性。</li><li>令 $f_3(t) = f_1(t) + f_2(t)$，带入零状态响应和零输入响应，看两者是否分别满足线性。<br><strong>时不变性</strong><br>如果系统的参数都是不随着时间变化的常数，称这样的系统是时不变系统。<br>判断方法：系统的输出与激励时移的时间无关，即：<script type="math/tex; mode=display">y(t-\tau) = H[f(t-\tau)], y(t) = H[f(t)]</script><strong>动态系统的时不变性判别</strong></li><li>找出系统的零状态。</li><li>带入 $f(t-\tau)$，看系统结果是否是 $y(t-\tau)$。<br><strong>因果性</strong><br>如果视激励为响应产生的原因，零状态响应是激励的结果，那么响应不应该出现于激励之前。换句话说，系统的响应不应该<br>与未来的激励有关，而只与现在和过去的激励有关。</li></ol><p>称这样的系统为因果系统，因果系统只在以时间为变量的系统中出现。</p><p>对于系统输出$y(t_r)$，如果系统输入$x(t_i)$导致$t_i &gt; t_r$，此时系统的因果性被破坏，系统不具有因果性。</p><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><p>如果系统的激励是有界的，且零状态响应也是有界的，称这样的系统是稳定系统。</p><h2 id="LTI系统分析方法概述"><a href="#LTI系统分析方法概述" class="headerlink" title="LTI系统分析方法概述"></a>LTI系统分析方法概述</h2><h3 id="描述系统的方法"><a href="#描述系统的方法" class="headerlink" title="描述系统的方法"></a>描述系统的方法</h3><ul><li>输入-输出法<br>  只把输入变量和输出变量作为描述的因素，系统内部的结构视作黑箱。</li><li><p>状态变量法<br>  状态变量法用两个方程描述系统：</p><p>  <strong>状态方程</strong>：描述系统内部状态与输入的关系。<br>  <strong>输出方程</strong>： 描述系统内部响应与输入和状态变量之间的关系。</p></li></ul><h2 id="求解系统方程的方法"><a href="#求解系统方程的方法" class="headerlink" title="求解系统方程的方法"></a>求解系统方程的方法</h2><ul><li>时域分析法<br>  直接分析时间变量函数。连续系统通常由微分方程描述，离散系统通常由差分方程描述。因此直接求解对应的以时间为变量的方程。此外还有卷积方法。</li><li>变换法<br>  对时间变量函数转换为某个域中以其他因素作为变量的函数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通信原理02</title>
      <link href="/2025/06/21/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8602/"/>
      <url>/2025/06/21/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8602/</url>
      
        <content type="html"><![CDATA[<h1 id="02-Chapter-2：信号的分析方法"><a href="#02-Chapter-2：信号的分析方法" class="headerlink" title="02 Chapter 2：信号的分析方法"></a>02 Chapter 2：信号的分析方法</h1><h2 id="1-经典信号分析"><a href="#1-经典信号分析" class="headerlink" title="1 经典信号分析"></a>1 经典信号分析</h2><h3 id="1-1-DC分量和AC分量"><a href="#1-1-DC分量和AC分量" class="headerlink" title="1.1 DC分量和AC分量"></a>1.1 DC分量和AC分量</h3><p>信号 $s(t)$ 的DC分量是它在时间上的平均</p><script type="math/tex; mode=display">S_{d c}=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} s(t) d t</script><p>信号 $s(t)$ 通常可以分解为 DC 分量加上 AC 分量</p><script type="math/tex; mode=display">s(t)=S_{d c}+S_{a c}(t)</script><h3 id="1-2-信号的类型"><a href="#1-2-信号的类型" class="headerlink" title="1.2 信号的类型"></a>1.2 信号的类型</h3><p>1．确知信号：信号的值是确定且可预测的。这通常意味着信号随时间变化的值可以写成一个确定的函数<br>2．随机信号：信号的值是随机的并且不可预测。例如视频中像素点的亮度值，语音的振幅等等。<br>3．周期／非周期信号：信号是否满足 $f(t)=f(t+n T)$<br>1.3 信号的能量与功率</p><p>假设 $f(t)$ 是信号作用在 $1 \Omega$ 电阻上的电压／电流，那么归一化的能量是</p><script type="math/tex; mode=display">E=\int_{-\infty}^{\infty}|f(t)|^2 d t</script><p>归一化的平均功率是</p><script type="math/tex; mode=display">P=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}}|f(t)|^2 d t</script><p>－能量信号：如果信号的能量有限，那么根据上述定义的公式，取极限之后信号的功率是一个常数除无穷，那么功率则为 $0.0&lt;E&lt;\infty$ 且 $P=0$<br>－功率信号：如果功率非 0 ，为一常数，那么能量必定为无穷，这样极限才存在。 $0&lt;P&lt;\infty$ 且 $E \rightarrow \infty$</p><h3 id="1-4-dB-的计算"><a href="#1-4-dB-的计算" class="headerlink" title="1.4 dB 的计算"></a>1.4 dB 的计算</h3><p>第一种类型是能量的 dB 数值。</p><ul><li>功率增益：对于一个系统，如果输入系统功率是 $P<em>I$ ，输出功率 $P_O$ ，那么功率增益 $G</em>{d B}=10 \log \left(P_I / P_O\right)$</li><li>信噪比：$S N R_{d B}=10 \log (S / N)$</li></ul><script type="math/tex; mode=display">\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script><h3 id="1-5-奇异函数"><a href="#1-5-奇异函数" class="headerlink" title="1.5 奇异函数"></a>1.5 奇异函数</h3><p>（1）冲激函数</p><script type="math/tex; mode=display">\delta(t)= \begin{cases}\infty & t=0 \\ 0 & t \neq 0\end{cases}</script><p>冲激函数的性质</p><script type="math/tex; mode=display">\left\{\begin{array}{l}\int_{-\infty}^{\infty} \delta(t) d t=1 \\\int_{-\infty}^{\infty} a \delta(t) d t=a \\\int_{-\infty}^{\infty} s(t) \delta\left(t-t_0\right) d t=s\left(t_0\right)\end{array}\right.</script><p>（2）门函数</p><script type="math/tex; mode=display">G_\tau(t)= \begin{cases}1 & |t| \leq \frac{\tau}{2} \\ 0 & |t| \geq \frac{\tau}{2}\end{cases}</script><p>（3）Sa函数</p><script type="math/tex; mode=display">S a(t)=\frac{\sin t}{t}</script><p>或者</p><script type="math/tex; mode=display">S a\left(\frac{\pi t}{T_s}\right)=\frac{\sin \frac{\pi t}{T_s}}{\frac{\pi t}{T_s}}</script><h3 id="1-6-非周期信号的Fourier变换"><a href="#1-6-非周期信号的Fourier变换" class="headerlink" title="1.6 非周期信号的Fourier变换"></a>1.6 非周期信号的Fourier变换</h3><p>－<strong>Fourier分析公式（变换）</strong></p><script type="math/tex; mode=display">F(\omega)=\int_{-\infty}^{\infty} f(t) e^{-j \omega t} d t</script><p>－<strong>Fourier合成公式（反变换）</strong></p><script type="math/tex; mode=display">f(t)=\frac{1}{2 \pi} \int_{-\infty}^{\infty} F(j \omega) e^{j \omega t} d \omega</script><p>利用Fourier变换，可以得到门函数的Fourier变换对</p><script type="math/tex; mode=display">G_\tau(t) \leftrightarrow \tau S a\left(\frac{\omega \tau}{2}\right)</script><p>其中 $\tau$ 为门宽。<br>同样Sa函数的Fourier变换对</p><script type="math/tex; mode=display">S a\left(\frac{\pi t}{T_s}\right) \leftrightarrow T_s G_{\frac{2 \pi}{T_s}}(\omega)</script><h3 id="1-7-卷积"><a href="#1-7-卷积" class="headerlink" title="1.7 卷积"></a>1.7 卷积</h3><p>信号的卷积定义为</p><script type="math/tex; mode=display">f_1(t) * f_2(t)=\int_{-\infty}^{\infty} f_1(\tau) f_2(t-\tau) d \tau</script><p>卷积运算的时频关系为<br>1．时域卷积频域相乘</p><script type="math/tex; mode=display">f_1(t) * f_2(t) \leftrightarrow F_1(\omega) F_2(\omega)</script><p>2．时域相乘，频域乘系数卷积</p><script type="math/tex; mode=display">f_1(t) f_2(t)=\frac{1}{2 \pi} F_1(\omega) * F_2(\omega)</script><h3 id="1-8-能量密度谱（ESD）与功率密度谱（PSD）"><a href="#1-8-能量密度谱（ESD）与功率密度谱（PSD）" class="headerlink" title="1.8 能量密度谱（ESD）与功率密度谱（PSD）"></a>1.8 能量密度谱（ESD）与功率密度谱（PSD）</h3><p>时域计算能量信号 $f(t)$ 的能量的公式为</p><script type="math/tex; mode=display">E=\int_{-\infty}^{\infty} f^2(t) d t</script><p>频域计算能量信号 $f(t)$ 的能量的公式为</p><script type="math/tex; mode=display">E=\frac{1}{2 \pi} \int_{-\infty}^{\infty}|F(\omega)|^2 d \omega</script><p>定义能量密度谱ESD为</p><script type="math/tex; mode=display">E_f(\omega)=|F(\omega)|^2</script><p>其意义是信号在单位频带中的能量，或者说信号能量在频带中的分布，单位是 $(\mathrm{J} / \mathrm{Hz})$<br>时域计算功率信号 $f(t)$ 的功率的公式为</p><script type="math/tex; mode=display">P=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} f^2(t) d t</script><p>频域计算功率信号 $f(t)$ 的功率的公式为</p><script type="math/tex; mode=display">P=\frac{1}{2 \pi} \int_{-\infty}^{\infty} \lim _{T \rightarrow \infty} \frac{\left|F_T(\omega)\right|^2}{T} d \omega</script><p>其中 $F_T(\omega)$ 是 $f_T(t)$ 的Fourier变换，而 $f_T(t)$ 是在区间 $\left[-\frac{T}{2}, \frac{T}{2}\right]$ 截断信号 $f(t)$ 生成的。<br>定义功率密度谱PSD为</p><script type="math/tex; mode=display">P_f(\omega)=\lim _{T \rightarrow \infty} \frac{\left|F_T(\omega)\right|^2}{T}</script><p>它的意义是单位频带中的平均功率，单位是 $(\mathrm{W} / \mathrm{Hz})$<br>ESD和PSD有更好的计算方法，Wiener－Khinchin定理指出。能量信号的ESD是其ACF（自相关函数）的Fourier变换</p><script type="math/tex; mode=display">R(\tau) \leftrightarrow E_f(\omega)</script><p>功率信号的PSD是其ACF的Fourier变换</p><script type="math/tex; mode=display">R(\tau) \leftrightarrow P_f(\omega)</script><h3 id="1-9-自相关函数ACF与互相关函数CCF"><a href="#1-9-自相关函数ACF与互相关函数CCF" class="headerlink" title="1.9 自相关函数ACF与互相关函数CCF"></a>1.9 自相关函数ACF与互相关函数CCF</h3><p>能量信号的ACF为</p><script type="math/tex; mode=display">R(\tau)=\int_{-\infty}^{\infty} f(t) f(t+\tau) d t</script><p>功率信号的ACF为</p><script type="math/tex; mode=display">R(\tau)=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} f(t) f(t+\tau) d t</script><p>能量信号的CCF为</p><script type="math/tex; mode=display">R_{12}(\tau)=\int_{-\infty}^{\infty} f_1(t) f_2(t+\tau) d t</script><p>功率信号的CCF为</p><script type="math/tex; mode=display">R_{12}(\tau)=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} f_1(t) f_2(t+\tau) d t</script><p>同时互相关函数满足</p><script type="math/tex; mode=display">R_{21}(\tau)=R_{12}(-\tau)</script><h2 id="2-统计信号分析"><a href="#2-统计信号分析" class="headerlink" title="2 统计信号分析"></a>2 统计信号分析</h2><p>这一部分将使用随机过程来描述信号</p><h3 id="2-1-随机过程"><a href="#2-1-随机过程" class="headerlink" title="2.1 随机过程"></a>2.1 随机过程</h3><p>随机过程在生活中十分常见，例如一周的气温可以是一个随机过程。在这七天里，每天的气温都是一个随机变量，七天的气温就是七个随机变量构成的集合：${X(1), X(2), \ldots, X(7)}$ ，或者可以写作 ${X(n), n \in[1,7]}$ 。这个时候，集合里的元素由变量 $n$ 索引，当确定好 $n$ 的时候，就得到一个随机变量。</p><p>一个随机过程是一系列随机变量构成的集合，并由时间 $t$ 索引：${X(t), t \in T}$ 。如果时间 $t$ 是离散的，那么随机过程就是离散的，这个时候可以将随机过程中所有的随机变量列出来 ${X(0), X(1), X(2), \ldots}$ 。如果时间 $t$ 是连续的，那么随机过程就是连续的，这个时候可以看作由时间 $t$ 索引了无限个随机变量。当确定一个时间点 $t_0$ 的时候，我们得到了这个集合中的一个随机变量 $X\left(t_0\right)$ 。</p><p>既然每个时间点都是一个随机变量，那么它就存在一个累积分布函数（CDF）和一个概率密度函数（PDF）。<br>我们知道，CDF定义为随机变量取值小于等于某个值的概率，即</p><script type="math/tex; mode=display">F(x)=P[X \leq x]</script><p>那么对于随机过程而言，如果我们确定某个时间点 $t_1$ ，得到一个随机变量 $X\left(t_1\right)$ ，它的CDF就是</p><script type="math/tex; mode=display">F_1\left(x_1, t_1\right)=P\left[X\left(t_1\right) \leq x_1\right]</script><p>这个函数与两个值有关，一个是取值 $x_1$ ，一个是时间 $t_1$ 。所以，它可以看作在时间 $t_1$ ，随机变量 $X\left(t_1\right)$ 的取值小于等于 $x_1$ 的概率分布。</p><p>那么PDF就是它的一阶偏导数</p><script type="math/tex; mode=display">\frac{\partial F_1\left(x_1, t_1\right)}{\partial x_1}=f_1\left(x_1, t_1\right)</script><p>这也叫做随机过程的一维PDF。注意，当随机过程取不同时间点的时候，分布可能是不一样的，这也是为什么这里加上了角标 $f_1$ 和 $x_1$ 。 有些书上会写 $f_t(x, t)$ ，代表在时刻时服从的概率密度。</p><p>如果我们取 n 个时间点，就有</p><script type="math/tex; mode=display">f_n\left(x_1, x_2, \ldots, x_n ; t_1, t_2, \ldots, t_n\right)=\frac{\partial^n F_n\left(x_1, x_2 \ldots, x_n ; t_1, t_2, \ldots, t_n\right)}{\partial x_1 \partial x_2 \ldots \partial x_n}</script><p>这是随机过程的 $n$ 维PDF。 $n$ 取得越大，对随机过程的统计特性描述就越充分。</p><h3 id="2-2-随机过程的数字特征"><a href="#2-2-随机过程的数字特征" class="headerlink" title="2.2 随机过程的数字特征"></a>2.2 随机过程的数字特征</h3><p><strong>期望</strong>：随机过程的期望是对其中的随机变量进行期望运算，设随机过程 ${X(t), t \in T}$</p><script type="math/tex; mode=display">a(t)=E[X(t)]</script><p>我们将随机过程中的随机变量求了期望，而时间变量仍然存在，所以期望是关于时间的函数。这是因为时间不同概率分布可能不同，则不同时间点的期望可能不同。</p><p><strong>方差</strong>：随机过程的方差定义为</p><script type="math/tex; mode=display">\sigma^2(t)=D[X(t)]=E\left\{\left[X(t)-E[X(t)]^2\right\}=E\left[X^2(t)\right]-E^2[X(t)]\right.</script><p>由于同样的分布随时间可能变化的原因，方差也是时间的函数。<br><strong>ACF</strong>： ACF 定义为</p><script type="math/tex; mode=display">R\left(t_1, t_2\right)=E\left[X\left(t_1\right) X\left(t_2\right)\right]</script><p>或者</p><script type="math/tex; mode=display">R(t, t+\tau)=E[X(t) X(t+\tau)]</script><p>自协方差函数：自协方差函数定义为</p><script type="math/tex; mode=display">B\left(t_1, t_2\right)=E\left\{\left[X\left(t_1\right)-a\left(t_1\right)\right]\left[X\left(t_2\right)-a\left(t_2\right)\right]\right\}</script><p>ACF 和自协方差函数还存在以下关系</p><script type="math/tex; mode=display">B\left(t_1, t_2\right)=R\left(t_1, t_2\right)-a\left(t_1\right) a\left(t_2\right)</script><h3 id="2-3-平棯随机过栓"><a href="#2-3-平棯随机过栓" class="headerlink" title="2.3 平棯随机过栓"></a>2.3 平棯随机过栓</h3><p>严平稳（平稳）：如果一个随机过程 $\xi(t)$ 的 n 维PDF满足</p><script type="math/tex; mode=display">f_n\left(x_1, x_2, \ldots, x_n ; t_1, t_2, \ldots, t_n\right)=f_n\left(x_1, x_2, \ldots, x_n ; t_1+\tau, t_2+\tau, \ldots, t_n+\tau\right)</script><p>则称其是严平稳（平稳）的。<br>我们注意到其一维PDF满足</p><script type="math/tex; mode=display">f_1\left(x_1 ; t_1\right)=f_1\left(x_1 ; t_1+\tau\right)</script><p>也就是说任取一个起点 $t_1$ ，对于任意一个时间间隔之后的PDF都不变，那么一维PDF与时间就没有关系了。其二维PDF满足</p><script type="math/tex; mode=display">f_2\left(x_1, x_2 ; t_1, t_2\right)=f_2\left(x_1, x_2 ; t_1+\tau, t_2+\tau\right)</script><p>也就是说任取两个不同的时间起点，在任意一个时间间隔后PDF都不变，那么二维PDF与选取的两个时间起点之差有关。宽平稳：如果随机过程的均值是常数， ACF 只与时间差 $\tau$ 有关，即</p><script type="math/tex; mode=display">E[X(t)]=a \quad R(t, t+\tau)=R(\tau)</script><p>那么随机过程就是宽平稳的。<br>不难发现，严平稳要求了其 n 维PDF的性质，而宽平稳只要求了其均值和方差（一阶和二阶矩），所以严平稳一定是宽平稳，宽平稳不一定是严平稳。</p><p>平稳过程ACF的性质<br>\begin{tabular}{|l|l|}<br>\hline ACF &amp; 性质 \<br>\hline$R(0)=E\left[X^2(t)\right]=S$ &amp; 平均功率 \<br>\hline$R(\infty)=E[X(t)]=a^2$ &amp; 直流功率 \<br>\hline$R(0)-R(\infty)=\sigma^2$ &amp; 交流功率 \<br>\hline$R(\tau)=R(-\tau)$ &amp; 偶函数 \<br>\hline$|R(\tau)| \leq R(0)$ &amp; ACF上界 \<br>\hline<br>\end{tabular}</p><p>平稳过程的Wiener－Khinchin定理</p><p>对于平稳随机过程，PSD是ACF的Fourier变换。即</p><script type="math/tex; mode=display">P_{\xi}(\omega)=\mathcal{F}\left[R_{\xi}(\tau)\right]</script><p>反过来， ACF 是 PSD 的Fourier反变换</p><script type="math/tex; mode=display">P_{\xi}(\omega)=\mathcal{F}^{-1}\left[R_{\xi}(\tau)\right]</script><p>2.4 遍历性</p><p>我们定义随机过程的时间平均是</p><script type="math/tex; mode=display">\langle X(t)\rangle=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} X(t) d t</script><p>时间自相关函数是</p><script type="math/tex; mode=display">\langle X(t) X(t+\tau)\rangle=\lim _{T \rightarrow \infty} \frac{1}{T} \int_{-\frac{T}{2}}^{\frac{T}{2}} X(t) X(t+\tau) d t</script><p>如果满足时间平均等于统计平均（期望），即</p><script type="math/tex; mode=display">\langle X(t)\rangle=E[X(t)]=a</script><p>时间自相关函数等于统计自相关函数，即</p><script type="math/tex; mode=display">\langle X(t) X(t+\tau)\rangle=E[X(t) X(t+\tau)]=R(\tau)</script><p>那么就称随机过程是遍历的。<br>遍历过程一定是平稳的，但平稳过程不一定遍历。</p><h3 id="2．5-Gaussian过程"><a href="#2．5-Gaussian过程" class="headerlink" title="2．5 Gaussian过程"></a>2．5 Gaussian过程</h3><p><strong>定义</strong>：对于一个随机过程 ${X(t), t \in T}$ ，如果任取 n 个时间点，得到的随机变量 $X\left(t_1\right), X\left(t_2\right), \ldots, X\left(t_n\right)$ 联合起来服从 n 维高斯分布，如果将 n 个随机变量写成一个向量 $X=\left[X\left(t_1\right), X\left(t_2\right), \ldots, X\left(t_n\right)\right]^T$</p><script type="math/tex; mode=display">f(\boldsymbol{x})=\frac{1}{\sqrt{\operatorname{det}(C)}(2 \pi)^{n / 2}} \exp \left\{-\frac{1}{2}(\boldsymbol{x}-\boldsymbol{\mu})^T C^{-1}(\boldsymbol{x}-\boldsymbol{\mu})\right\}</script><p>其中 $C$ 为协方差矩阵，$\mu$ 为均值向量<br>那么这个随机过程是Gaussian过程。上述n维Gaussian分布的表达式不做重点，重点在于其服从Gaussian分布，以及它有以下重要性质</p><p>1．Gaussian过程宽平稳就严平稳<br>2．Gaussian过程各时刻得到的随机变量 $X\left(t_1\right), X\left(t_2\right), \ldots, X\left(t_n\right)$ 都是独立的。<br>3．多个高斯过程的线性组合还是高斯过程<br>Gaussian分布的一维PDF就是上述只取一个时间点时的概率分布，其PDF为</p><script type="math/tex; mode=display">f(x)=\frac{1}{\sqrt{2 \pi} \sigma} \exp \left\{-\frac{(x-\mu)^2}{2 \sigma^2}\right\}</script><p>这就是概率论中大家熟悉的一维Gaussian分布的表达式。其均值为 $\mu$ ，方差为 $\sigma^2$ ，一般记为 $x \sim N\left(\mu, \sigma^2\right)$ ，当 $\mu=0$ ， $\sigma^2=1$ 时又称作标准Gaussian分布</p><p>Gaussian分布引出的有用函数：我们通过Gaussian分布还创造出了一些有用的函数。<br>（1）Error函数<br>我们定义Error函数为</p><script type="math/tex; mode=display">\operatorname{erf}(x)=\frac{2}{\sqrt{\pi}} \int_0^x e^{-z^2} \mathrm{~d} z</script><p>这个函数满足 $\operatorname{erf}(-x)=-\operatorname{erf}(x), \operatorname{erf}(0)=0, \operatorname{erf}(\infty)=1$ 。<br>（2）互补Error函数</p><script type="math/tex; mode=display">\operatorname{erfc}(x)=1-\operatorname{erf}(x)=\frac{2}{\sqrt{\pi}} \int_x^{\infty} e^{-z^2} \mathrm{~d} z</script><p>这个函数满足 $\operatorname{erfc}(-x)=2-\operatorname{erfc}(x), \operatorname{erfc}(0)=1, \operatorname{erfc}(\infty)=0$ 。<br>当 $x$ 非常大的时候，还可以通过以下公式近似计算 $\operatorname{erfc}(x)$ ．</p><script type="math/tex; mode=display">\operatorname{erfc}(x) \approx \frac{1}{\sqrt{\pi} x} e^{-x^2}</script><p>（3）Q函数<br>Q函数实际上就是标准Gaussian分布的右边积分</p><script type="math/tex; mode=display">Q(x)=\frac{1}{\sqrt{2 \pi}} \int_x^{\infty} \exp \left\{-\frac{y^2}{2}\right\} \mathrm{d} y</script><p>这个函数满足 $Q(-x)=1-Q(x)(x&gt;0), Q(0)=0.5$<br>当 x 非常大的时候，还可以用以下公式近似计算 $Q(x)$</p><script type="math/tex; mode=display">Q(x) \approx \frac{1}{\sqrt{2 \pi} x} \exp \left\{-\frac{x^2}{2}\right\}</script><p>Gaussian分布，Error函数，互补Error函数和Q函数存在以下关系</p><script type="math/tex; mode=display">\left\{\begin{array}{l}Q(x)=\frac{1}{2} \operatorname{erfc}\left(\frac{x}{\sqrt{2}}\right) \\\operatorname{erfc}(x)=2 Q(\sqrt{2} x)\end{array}\right.</script><p>以及当 $F(x)$ 表示Gaussian分布的CDF时</p><script type="math/tex; mode=display">F(x)= \begin{cases}\frac{1}{2}+\frac{1}{2} \operatorname{erf}\left(\frac{x-a}{\sqrt{2 a}}\right) & x \geq a \\ 1-\frac{1}{2} \operatorname{erfc}\left(\frac{x-a}{\sqrt{2 a}}\right) & x \leq a\end{cases}</script><h2 id="3-随机过程通过线性系统"><a href="#3-随机过程通过线性系统" class="headerlink" title="3 随机过程通过线性系统"></a>3 随机过程通过线性系统</h2><p>在信号与系统中，我们已经学过了信号通过LTI系统的知识。简单来说，信号 $f(t)$ 通过系统 $h(t)$ ，输出信号 $y(t)$ ，满足</p><script type="math/tex; mode=display">y(t)=f(t) * h(t)</script><p>其中＊是卷积运算。换到频域就是</p><script type="math/tex; mode=display">Y(j \omega)=F(j \omega) H(j \omega)</script><p>由于随机过程整体无法写成一个确定的表达式，或者说表达式中带有随机的成分，我们更关心其通过系统前后数字特征的变化。</p><h3 id="3-1-均值变化"><a href="#3-1-均值变化" class="headerlink" title="3.1 均值变化"></a>3.1 均值变化</h3><p>假设输入平稳随机过程 $\xi_i(t)$ 的均值 $E[\xi(t)]=a$ ，系统为 $h(t)$ 且因果，那么由卷积运算，其输出过程 $\xi_o(t)$ 为</p><script type="math/tex; mode=display">\xi_o(t)=\int_0^{\infty} h(\tau) \xi_i(t-\tau) \mathrm{d} \tau</script><p>取均值得到</p><script type="math/tex; mode=display">\begin{aligned}E\left[\xi_o(t)\right] & =\int_0^{\infty} h(\tau) E\left[\xi_i(t-\tau)\right] \mathrm{d} \tau \\& =\int_0^{\infty} h(\tau) a d \tau \\& =a \int_0^{\infty} h(\tau) d \tau\end{aligned}</script><p>注意到</p><script type="math/tex; mode=display">H(0)=\int_0^{\infty} h(t) e^{-j 0 t} d t=\int_0^{\infty} h(t) d t</script><p>则</p><script type="math/tex; mode=display">E\left[\xi_o(t)\right]=a H(0)</script><p>也就是说输出随机过程的均值是输入随机过程的均值乘上系统函数的初值。</p><h2 id="4-窄帶随机过程-theta"><a href="#4-窄帶随机过程-theta" class="headerlink" title="4 窄帶随机过程 $\theta$"></a>4 窄帶随机过程 $\theta$</h2><p>如果说一个随机过程，它的PSD集中在某个频率 $f_c$ 附近，$f_c$ 我们称作中心频率。且其带宽 $\Delta f$ 满足 $\Delta f \ll f_c$ ，那么这个随机过程就叫做窄带随机过程。</p><p>研究窄带随机过程是因为大多数通信系统都是窄带系统，即满足系统带宽B和中心频率 $f_c, B \ll f_c$ ，那么随机过程通过这个系统也就成为了窄带随机过程。</p><p>在众多随机过程中，拥有正弦波形式的随机过程是通信中最常用的。我们现在研究一个包络和相位都是随机的正弦波过程</p><script type="math/tex; mode=display">\xi(t)=a(t) \cos \left[\omega_c t+\phi(t)\right]</script><p>其中 $a(t)$ 和 $\phi(t)$ 是某种随机包络和随机相位。现在我们利用关系 $\cos (A+B)=\cos A \cos B-\sin A \sin B$ 得到</p><script type="math/tex; mode=display">\begin{aligned}\xi(t) & =a(t) \cos \phi(t) \cos \omega_c t-a(t) \sin \phi(t) \sin \omega_c t \\& =\xi_c(t) \cos \omega_c t-\xi_s(t) \sin \omega_c t\end{aligned}</script><p>与原随机过程相比，$\xi_c(t)$ 仍然乘以 $\cos \omega_c t$ ，因此是同相的，所以称其为同相分量。而 $\xi_s(t)$ 乘以 $\sin \omega_c t$ ，与 $\cos$ 相差 $90^{\circ}$ ，所以是与原表达式正交的，我们称其为正交分量。</p><p>而且不难发现</p><script type="math/tex; mode=display">\phi(t)=\arctan \frac{\xi_s(t)}{\xi_c(t)}</script><p>以及</p><script type="math/tex; mode=display">a(t)=\sqrt{\xi_c^2(t)+\xi_s^2(t)}</script><p>现在，如果我们强制 $\xi(t)$ 是一个 0 均值，方差为 $\sigma^2$ 的平稳Gaussian窄带过程，那么将会得到以下结论：<br>1．均值为 0 的窄带平稳Gaussian过程，同相分量和正交分量也是平稳Gaussian过程，且均值为 0 ，方差相同。<br>2．其包络 $a(t)$ 服从Rayleigh分布，其一维PDF为</p><script type="math/tex; mode=display">f(a)=\frac{a}{\sigma^2} \exp \left[-\frac{a^2}{2 \sigma^2}\right]</script><p>3．其相位 $\phi(t)$ 服从 $[-\pi, \pi]$ 或 $[0,2 \pi]$ 的均匀分布。<br>4．相位与包络统计上独立。</p><h2 id="5-Gausssian白噪声与带限白噪声"><a href="#5-Gausssian白噪声与带限白噪声" class="headerlink" title="5 Gausssian白噪声与带限白噪声"></a>5 Gausssian白噪声与带限白噪声</h2><h3 id="5-1-白噪声"><a href="#5-1-白噪声" class="headerlink" title="5.1 白噪声"></a>5.1 白噪声</h3><p>所谓白噪声就是PSD是一个常数的随机过程。<br>对于单边 $\mathrm{PSD}\left(0 \leq \omega&lt;\infty\right.$ 不考虑负频率），我们记这个常数为 $n_0$ ，即 $P(\omega)=n_0$ 。而它的双边 $\mathrm{PSD}(-\infty&lt;\omega&lt;\infty$ 考虑负频率）为 $\frac{n_0}{2}$ ，即 $P(\omega)=\frac{n_0}{2}$ 。工程上单边PSD更常用。然而现实生活中没有理想的白噪声，只要在通信系统工作频率范围内其PSD是个常数，我们就认为它是白噪声。</p><h3 id="5．2-Gaussian白噪声"><a href="#5．2-Gaussian白噪声" class="headerlink" title="5．2 Gaussian白噪声"></a>5．2 Gaussian白噪声</h3><p>现在我们再考虑将PSD为常数的特性加入Gaussian过程中，那么一个均值为 0 ，方差为 $\sigma^2, \operatorname{ACF}$ 为 $R_n(\tau)=\frac{n_0}{2} \delta(\tau)$ ，PSD为 $P_n(\omega)=\frac{n_0}{2}$ ，且平稳遍历的随机过程我们就称其为Gaussian白噪声。</p><p>Gaussian白噪声的PDF服从Gaussian分布，而且满足不同时间的取到的随机变量独立。一般来讲，Gaussian白噪声是作为加性噪声出现的，即噪声叠加到信号上。加性Gaussian白噪声又缩写为AWGN。</p><h3 id="5-3-带限白噪声"><a href="#5-3-带限白噪声" class="headerlink" title="5.3 带限白噪声"></a>5.3 带限白噪声</h3><p>现实生活中的通信系统都是带宽有限的，当白噪声通过带宽有限的系统之后就叫做带限白噪声。例如通过低通系统就是低通白噪声，通过带通系统之后就是带通白噪声。</p><p>假设双边 PSD 为 $P(\omega)=\frac{n_0}{2}$ 白噪声通过了一个带宽为 $B$ 的窄带带通系统，那么其功率为</p><script type="math/tex; mode=display">N=n_0 B</script>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通信原理01</title>
      <link href="/2025/06/21/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8601/"/>
      <url>/2025/06/21/%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%8601/</url>
      
        <content type="html"><![CDATA[<h1 id="01-Chapter-1：通信的基本概念"><a href="#01-Chapter-1：通信的基本概念" class="headerlink" title="01 Chapter 1：通信的基本概念"></a>01 Chapter 1：通信的基本概念</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1 基本概念"></a>1 基本概念</h2><p>通信的需求起源于人们想要把一段信息传输到另外一个地方去。如果距离近，例如两人面对面，那只需要开口说话就行了，但一旦距离很远，通信需要各种各样的工程方法。</p><h3 id="1-1-信息，消息与信号"><a href="#1-1-信息，消息与信号" class="headerlink" title="1.1 信息，消息与信号"></a>1.1 信息，消息与信号</h3><p><strong>例1</strong> ：Alice想要传递“一起去旅游”的信息给Bob，她可以写短信，可以打电话，可以发起视频聊天，这代表着信息能够被表达成不同的消息。而她无论采取哪种方式，最终都会变成电磁波传播出去。也就是消息会被转换成信号。<br><strong>Information(信息)</strong>：就如同例1中讲述的一样，无论采取短信，电话还是视频聊天，最终表达的意思是一样的，蕴含在这些形式中的东西称之为信息，它是我们要表示和传送的对象。<br><strong>Message(消息)</strong>：对于同一个表达的意思，我们可以有很多种表达方式，可以说消息是信息的载体。<br><strong>Signal(信号)</strong>：现代通信系统中一般指代电磁波，我们拿到了消息，需要将其转换为电磁波再通过天线发送出去。所以信号是消息的承载者。</p><h3 id="1-2-模拟信号与数字信号"><a href="#1-2-模拟信号与数字信号" class="headerlink" title="1.2 模拟信号与数字信号"></a>1.2 模拟信号与数字信号</h3><p>信号实际上是有两个维度的，第一个维度是时间，第二个维度是取值。我们可以简单排列组合这两个维度的连续与离散情况。例如时间连续取值离散，时间离散取值连续等等。</p><p><strong>模拟信号</strong>：取值连续，时间连续或离散的信号<br><strong>数字信号</strong>：取值离散，时间连续或离散的信号</p><p>可见，取值离散的我们才能称之为数字信号，这是因为数字电路或者计算机中无法存储精度无限的值</p><h3 id="1-3-通信与通信系统"><a href="#1-3-通信与通信系统" class="headerlink" title="1.3 通信与通信系统"></a>1.3 通信与通信系统</h3><p>例2：Alice准备发送消息了，她选择使用手机打电话。Alice的声音被转换为电磁波，通过天线在空气中传播到运营商的通信设备里，最终传输到了Bob的手机上。</p><p><strong>通信</strong>：如例2中Alice用手机打电话一样，使用电信号来传输包含信息的消息就是通信。<br><strong>通信系统</strong>：在例2中，Alice的语音是通过了一系列设备，包括手机，运营商设备，空气等等传到了Bob电话里，这一系列完成通信过程的电子设备和信道(在这里是空气)就是通信系统。</p><h2 id="2-通信系统"><a href="#2-通信系统" class="headerlink" title="2 通信系统"></a>2 通信系统</h2><h3 id="2-1-系统框图"><a href="#2-1-系统框图" class="headerlink" title="2.1 系统框图"></a>2.1 系统框图</h3><p>在例2中，我们看到了一整个通信过程。Alice生成了信息，她是信息源，手机以及手机中的天线发送了信号，它们是发送设备。空气作为了传输的信道，因为电磁波在空气中传播，而更多的传输过程发生在了运营商设备中。Bob的手机则是接收设备，Bob作为信息的接收者是信宿。<br><strong>一般通信系统</strong><br><img src="https://freeimghost.com/images/2025/06/21/_21-6-2025_2198_www.zhenglinblog.top.jpeg" alt="code"><br><strong>Transmitter</strong>：将消息转换为适合信道传输的信号<br><strong>Channel</strong>：信号传输的媒介<br><strong>Receiver</strong>：将信号转换为消息<br><strong>Recipient</strong>(信宿或受信者)：消息的目标物体。</p><h3 id="2-2-系统指标"><a href="#2-2-系统指标" class="headerlink" title="2.2 系统指标"></a>2.2 系统指标</h3><p><strong>例3</strong>：Bob喜欢看网络视频，他不喜欢网络速度太慢，这样要等很久才能看得到接下来的画面。Bob也喜欢玩网络游戏，但他不希望网络游戏的信息传输出现错误。也就是说，我们希望通信系统既<strong>高效(efficiency)又可靠(Reliability)</strong>。</p><p>为了提升efficiency，我们发明了<strong>信源编码</strong>，它包括了AD转换，数据压缩等来减少信息中的冗余，尝试用更少的二进制数字来表示信息。因为要传输的东西通过编码变少了。所以efficiency提高了</p><p>为了提升reliability，我们发明了<strong>信道编码</strong>，它通过增加冗余来让信号在未知信道中也能可靠传输。典型代表就是纠错和检错能力。通过携带额外的信息让接收端有能力发现传输中的错误，甚至修改错误。</p><h3 id="2-3-数字通信系统"><a href="#2-3-数字通信系统" class="headerlink" title="2.3 数字通信系统"></a>2.3 数字通信系统</h3><p>数字通信系统使用二进制码来进行通信</p><ul><li><p>优点</p><ul><li>抗干扰能力强</li><li>差错控制</li><li>易于处理，传输，存储</li><li>易于从不同信息源传输信号</li><li>易于整合与加密</li></ul></li><li><p>缺点</p><ul><li>需要更大传输带宽</li><li>需要同步<h3 id="2-4-通信系统不同的工作方式"><a href="#2-4-通信系统不同的工作方式" class="headerlink" title="2.4 通信系统不同的工作方式"></a>2.4 通信系统不同的工作方式</h3>例4：</li></ul></li><li><p>NASA向太空发送了一个旅行者号卫星，上面承载着人类文化的信息，但我们可能永远收不到回信。这是一种只有发送者向接收者发送的通信。</p></li><li>对讲机在其中一个人说话的时候，另一个人不能同时说话，而另一个人说话的时候，原来那个人就不能说话，这是一种双方同时只能有一个人作为发送者，另一个人作为接收者的通信。</li><li><p>微信视频聊天的两人能够同时看到对方的画面，双方既要同时发出视频信号，也要同时接收视频信号，这是一种双方同时都是接收者和发送者的通信。</p></li><li><p>单工(Simplex)：one-way的通信系统，一方为发送者，一方为接收者</p></li><li>半双工(Half Duplex)：two-way的通信系统，双方都是发送者，接收者，但是通信不能同时进行。</li><li>全双工(Full Duplex)：two-way的通信系统，双方同时发送与接收。</li></ul><p>例5：如果我有五根电线，那么我一次就能往线的另一头传输5bit的二进制数字，如果我只有一根线，那么我这5个bit的数字得一位一位传过去。</p><p><strong>并行传输</strong>：一次性，同时传输n个bit<br><strong>串行传输</strong>：将二进制数字一个一个传输。</p><h2 id="3-信息量"><a href="#3-信息量" class="headerlink" title="3 信息量"></a>3 信息量</h2><p>我们之前提到过，信息蕴含在消息中，而对于接收者来说，真正要关心的是消息当中的不确定性。不确定性决定了信息量。</p><p>例6：这其实与编码是有关的。假设我们现在有一个八面体，要表示的消息是八面体抛掷后朝上的一面的结果。那么一共有八种可能性。我们现在用二进制码传输这个结果，二进制码来表示八种可能性，则需要三位，我们要传输3bit的二进制数。如果是十六面体呢？那需要4bit的二进制数。如你所见，随着面数增加，不确定性增加，需要编码的长度也变得越来越长，要传输的消息量(二进制位数)就越来越多。</p><p>这其实也反映了通信编码中的一个Philosophy：我们始终要用足够的长度来编码所有的可能性。</p><h3 id="3-1-信息量计算"><a href="#3-1-信息量计算" class="headerlink" title="3.1 信息量计算"></a>3.1 信息量计算</h3><p>Shannon提出，信息量应该由以下公式计算</p><script type="math/tex; mode=display">I(x)=\log _a \frac{1}{P(x)}=-\log _a P(x)</script><p>其中 x 是概率事件，P(x) 表示 x 发生的概率。</p><ul><li>a=2，计算结果的单位是bit</li><li>a=e ，计算结果的单位是nit</li><li>a=10 ，计算结果的单位是Hartley</li></ul><h2 id="4-度量通信系统的性能"><a href="#4-度量通信系统的性能" class="headerlink" title="4 度量通信系统的性能"></a>4 度量通信系统的性能</h2><p>在前文提到过，我们希望通信系统有好的efficiency同时有好的Reliability，我们现在正式给出其定义<br>（1）<strong>efficiency</strong>：高效的传输消息，在合适的方法下传输最大量的消息。<br>（2）<strong>reliability</strong>：系统可靠地传输消息，一般依赖于系统的抗噪性能。</p><p>工程中，efficiency和reliability是一个tade-off，增加其中一个会导致另一个下降。</p><h3 id="4-1-度量efficiency"><a href="#4-1-度量efficiency" class="headerlink" title="4.1 度量efficiency"></a>4.1 度量efficiency</h3><p>1）Efficiency的第一个度量就是传输的速度。在速度的度量中，我们有两个指标，<strong>Transmission symbol rate</strong>(传码率)和<strong>Transmission bit rate</strong>(传信率)。这是因为我们的信息源总是以symbol来定义的，就例如例7中Bob的游戏稀有度一样，有四个可能性，就意味着信息源是四元的。当我们想告诉别人Bob抽出了哪个稀有度的角色，我们只需要告诉他这四种可能性中的一个就行了。但当我们以二进制表示这四个Symbol的时候，每个Symbol需要两个bit编码，这个时候我们传输一个Symbol就意味着我们传输了两个bit。<br>Transmission symbol rate（传码率）：$R_B$ ，每秒传输的symbol数量，单位为是 $B a u d$ 。<br>Transmission bit rate（传信率）：$R_b$ ，每秒传输的bit数量，单位是bit／s，有时也写作bps，是bit per second的缩写。</p><p>现在我们给出 $R_B$ 的计算方法，它的公式是</p><script type="math/tex; mode=display">R_B=\frac{1}{T_s}</script><h2 id="5-传输过程"><a href="#5-传输过程" class="headerlink" title="5.传输过程"></a>5.传输过程</h2><h3 id="6-1-对于传输资源的描述"><a href="#6-1-对于传输资源的描述" class="headerlink" title="6.1 对于传输资源的描述"></a>6.1 对于传输资源的描述</h3><p>（1）信道带宽：告诉我们目前信道最大能利用的带宽有多大，它定义为最大能传输的频率减去最小能传输的频率。<br>2）传输功率：指的是发出信号的时候功率有多大，这通常决定着信噪比，因为发出信号之后，信号就会在信道中受到各种噪声的影响，只要发出功率大，信噪比就越高。</p><h3 id="6-2-传输损耗"><a href="#6-2-传输损耗" class="headerlink" title="6.2 传输损耗"></a>6.2 传输损耗</h3><p>由于材料会吸收电磁波等等原因，信号的功率或者振幅随着传输距离会降低，这称作Attenuation(衰减)。</p><p>噪声对信号可能造成波形的变化，让我们辨认不出原来的波形，这称作Distortion。</p><p>两根电线或者两个通讯设备靠的很近的时候，可能一个设备会干扰另一个设备，这叫做Interference。能够忽略两个设备相互干扰的最小距离称作Interference range</p><h3 id="6-3-波形问题"><a href="#6-3-波形问题" class="headerlink" title="6.3 波形问题"></a>6.3 波形问题</h3><p>假设我们要传输一段二进制码，二进制码在现实生活中可以用矩形波来表示，矩形波振幅为1的时候表示1，振幅为0的时候表示为0。<br><img src="https://freeimghost.com/images/2025/06/21/_21-6-2025_213044_www.zhenglinblog.top.jpeg" alt="code"><br>在传输的信号叠加噪声之后，波形可能失真程度很大。如果两个波峰挨得很近，那么极有可能在叠加噪声之后重叠在一起，一旦波峰重叠，我们将失去信号的特征，这是传输错误就发生了。于是，为了防止波峰重叠，我们需要考虑矩形波中波峰的距离。但是，这将直接影响我们传输的速度！如果矩形波能够由持续时间短且密集的波峰组成，那么在一小段时间里我们就能传输很多二进制码！</p><h2 id="7-信道容量"><a href="#7-信道容量" class="headerlink" title="7 信道容量"></a>7 信道容量</h2><p>既然信号的传输会因为噪声的影响而发生错误，那么给定一个信道，它最大能用多少的速度来传输bit而不出错呢？回顾之前看到的信道资源和影响信道的因素，它肯定和信道带宽和信噪比有关。</p><p>Shannon也给出了计算最大传输率的公式</p><script type="math/tex; mode=display">C=B \log _2\left(1+\frac{S}{N}\right)</script><p>其中 S 是平均信号功率， N 是平均噪声功率。这个公式计算出来的结果称作信道容量，它的意义是给定信道，信道理论上最大能够以多少速度传输bit而不出错。单位是bit $/ s$ ．</p><p>Shannon公式计算出的最大传输速度实际上是指理论上，存在一个方法能在这个速度之下传输而不出错。它具有很强的工程指导意义。当我们想要达到某个传输速度的时候，我们可以选择合适的带宽和信噪比来设计我们的通信系统。</p><p>那么，我们是否可以无限增加带宽来提升信道容量呢？<br>答案是不行的。不幸的是，信道噪声的功率通常与带宽相关，我们在之后的学习中会常见的这个公式</p><script type="math/tex; mode=display">N=n_0 B</script><p>它意味着噪声功率和带宽成正比，正比的系数是 $n_0$ ，这种噪声在之后的章节会学习到。<br>现在，我们使用这个公式更新我们的Shannon公式</p><script type="math/tex; mode=display">C=B \log _2\left(1+\frac{S}{n_0 B}\right)</script><p>注意到，当我们增加带宽的时候，信噪比不断缩小，那么式子中 $\log _2\left(1+\frac{S}{N}\right)$ 也在不断缩小，而B作为乘法因子在不断扩大，这显然是一个存在的极限！</p><script type="math/tex; mode=display">\lim _{B \rightarrow \infty} B \log _2\left(1+\frac{S}{n_0 B}\right) \approx 1.44 \frac{S}{n_0}</script><p>也就是说，就算我们无限制增大带宽，信道的容量也会有一个饱和的数值。我们无法获得无限的信道容量。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通信和计算机网络</title>
      <link href="/2025/06/07/%E9%80%9A%E4%BF%A1%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2025/06/07/%E9%80%9A%E4%BF%A1%E5%92%8C%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="通信和计算机网络"><a href="#通信和计算机网络" class="headerlink" title="通信和计算机网络"></a>通信和计算机网络</h1><h2 id="通信系统认知"><a href="#通信系统认知" class="headerlink" title="通信系统认知"></a>通信系统认知</h2><h3 id="通信发展背景"><a href="#通信发展背景" class="headerlink" title="通信发展背景"></a>通信发展背景</h3><p>通信技术发展的驱动力有两方面，其一是技术特性的发展，其二是需求的不断变化，可以简单归纳为技术(techique)和经济(economy)。</p><ul><li>技术特性的发展，发展趋势包括：<ul><li>速度越来越快、价格越来越低</li><li>智能化：能提供不同的服务质量(QoS)和可自定义的安全管理服务</li><li>因特网、万维网的连接和内外网的构建</li><li>移动性的不断增强</li></ul></li></ul><ul><li>新需求带来的新的服务，内容包括：<ul><li>对高速局域网的需求</li><li>企业对广域网的需求</li><li>数字电器和数字资源带来的高通信量的需求</li></ul></li></ul><h3 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h3><p>通信模型包括如下几个要素：</p><ul><li>源点(source)：生成传输数据</li><li>发送器（transmitter）：将信息转化和编码为传输系统中接受的电磁信号</li><li>传输系统（transmission system）：传输电磁信号，可以是传输线或者复杂的网络系统</li><li>接收器（receiver）：接收传输系统的信号，转化为可以被终点接收的数据信息</li><li>终端（destination）：接收来自接收器的数据信息<br>但是，传输系统的概念是相对的，在通信传输中，传输系统的概念：</li><li>可以是微观的，也可以是宏观的</li><li>可以是复杂的，也可以是简单的</li><li>传输系统的概念可以简单到任何能够独立实现传输功能的都是传输系统。可以直接在节点图上表示为两个节点之间的一条线。<h3 id="通信任务"><a href="#通信任务" class="headerlink" title="通信任务"></a>通信任务</h3>传输系统的利用</li><li>如何充分利用传输设施，通常包括复用（多个用户之间共享通信资源）和拥塞控制（避免系统因为过量的传输服务请求而超载）技术。<br>接口</li><li>任何通信设备都需要通过接口与传输系统连接。<br>产生信号</li><li>产生的信号需要满足：(1)使得信号可以在传输系统上进行传播 (2)信号能够被接收器转换为数据。<br>同步</li><li>接收器与发送器之间发送信号时，接收器需要知道信号的持续时间，发送时间和结束时间。<br>交换管理</li><li>制定两个设备通信时的规则，包括传输是否同时、单次传输的数据量、数据格式和意外情况的应对。<br>交换管理中的两个重要任务是：</li><li>差错检测和纠正：检测传输内容时候有错，并进行一定程度的校正。</li><li>流控制：避免终端不会因为源发送数据过快而无法及时接收和处理数据导致超载。<br>恢复</li><li>在传输发生故障而中断时能够从中断处继续工作，或者把涉及到的部分恢复到交换之前的状态。</li><li>寻址和路由选择<br>选择传输过程中某条具体的路径，且保证终端能够且唯一的接收到数据。</li><li>报文的格式化<br>使得在数据传输时数据的格式达成一致。</li><li>网络管理<br>对通信系统进行设置，监控，在发生故障时进行处理。</li><li><p>安全措施<br>确保只有期望的接收方可以接收到数据，且保证收到的数据不发生改动。</p><h3 id="信息的传输"><a href="#信息的传输" class="headerlink" title="信息的传输"></a>信息的传输</h3><p>信息传输的目标是：在最小花费的前提下，某种特定的设施能够提供所要求的性能，并且具有可接受的可靠性。<br>从目标来看，在设计传输系统时需要考虑<strong>传输媒体、通信技术和传输效率</strong>。</p></li><li><p>传输媒体<br>现在普遍使用的传输方式是光纤传输和无线传输，这其中常见的传输媒体是双绞线、同轴线、光纤、地面微波和卫星微波。<br>光纤传输具有容量大和安全性（几乎不可能被窃听）的特点。但是目前交换技术的发展成为了瓶颈。<br>无线传输具有：<br>   个人可以轻松识别自己身份，并通过账号在广域内方便使用任何通信系统的能力。<br>   只用一个终端就能在不同环境下与信息服务连接的能力。</p></li><li><p>传输效率的提高<br>虽然传输设施的容量增加了，费用降低了，但是传输服务的支出仍然是企业服务中最大的一部分。提高传输效率可以减小通信系统的花费。常见的提高传输效率的技术有：</p></li><li>复用（multiplexing）<br>多个设备按照一定规则共享一个传输设施的通信资源，共享可以让该设施的费用由多个设备所属的用户分担。<br>常见的复用技术有频分复用、波分复用、同步时分复用和统计时分复用，以及码分复用。</li><li>压缩（compression）<br>减小数据体积，使得低容量且较为便宜的传输设施能够满足特定的需求。<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h3>通常广域网覆盖了很大的地理范围，内部包含了多个相互交换的节点，从一个设备触发的传输过程要通过路径选择（称为路由选择），途径选择的网络节点，最终到达某个终端。这些中途的网络节点不关心转发数据的内容，只提供数据交换功能，这样的传输称为透传（transparant transmission）。同时，局域网内部节点的拓扑结构通常是网状的(mesh)。<h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3>一般来说，相较于广域网的定义，局域网所囊括的地理范围更小，但是这样的定义仍然是灵活的。现在判断网络是局域网还是广域网主要是根据：1) 协议/信令/接口 是否通用 2) 网络内的资源是否所有人都可以使用。<br>通常情况下，局域网和局域网连接的设备都属于同一个组织，因此局域网内部的功能可以由组织自主定义，且局域网的网络管理由组织或者用户负责。<br>一般来说，局域网内的数据率要比广域网高得多。<br>局域网的常见配置是交换局域网和无限局域网，交换局域网可能含有一个或多个相互连接的交换机，每一个交换机连接了一些设备。这种拓扑结构是星型（star）。<br>从这里可以看出，交换的功能是进行小范围的节点通信。<blockquote><p> 注意计算机网络中的交换与通信网络中的交换机概念和定义都完全不同，此处指计算机网络中的交换和交换机。</p></blockquote></li></ul><h3 id="因特网"><a href="#因特网" class="headerlink" title="因特网"></a>因特网</h3><p>因特网（internet）是由1969年美国国防部开发的ARPANET演变而来的。因特网的终端系统称为主机（host），使用因特网的绝大多数主机会连接到某个局域网或者广域网上，这些网络通过路由器彼此相连。路由器的作用是在终端之间相互通信前在网络中进行大跨度范围的通信路径选择（称为路由）。</p><p>可以发现，一些局域网的作用是将本地设备进行汇聚，并通过路由器接入到多个相连的广域网中，这样的局域网称为接入网(AN)。为了保证接入网的高效运行和节省开支，接入网一般使用星形作为拓部结构。而多个相连的广域网最终组成核心网（CN），为了保证核心网的可靠性，核心网一般采用网状拓扑结构。</p><blockquote><p>接入网和核心网的概念来源于通信网络，在计算机网络中一般更强调本地网络和因特网，但是两个概念趋近于融合。</p></blockquote><p>源点主机将需要发送的数据拆分为一个分组序列，称为IP数据报/IP分组。每个分组包含目标主机的唯一数字地址：IP地址。每个分组根据这个目的地址途径一系列的路由器和网络，路由器是连接两个网络的处理器，功能是将数据沿着从源到终端的路径从一个网络转发到另一个网络，每个路由器在接收到分组时会进行路由选择，并沿着该路径转发数据包。</p><h3 id="拓扑结构"><a href="#拓扑结构" class="headerlink" title="拓扑结构"></a>拓扑结构</h3><p>常用的拓扑结构如下表所示：</p><div class="table-container"><table><thead><tr><th>类型</th><th>结构</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>星形</td><td>每一个站点通过两条点对点链路与同一个中央节点连接：<br>一条链路负责发送，一条链路负责接收。中央节点的作用可以是实现广播功能，也可以实现帧交换功能。</td><td>1. 新设备可以很方便地加入或者离开网络，可以提供更多，更方便的连接<br>2.设备之间不会有干扰</td><td>1. 可靠性低<br>2.需要中央结点</td></tr><tr><td>网形</td><td>每个结点与可能不止一个其他结点相连。</td><td>可靠性高，交换和路由设置更灵活。</td><td>需要设置的链路数量更多，成本更高</td></tr><tr><td>总线形</td><td>所有的站点通过标准的硬件接口直接连接到一个线性传输媒体上。</td><td>新设备可以很方便地加入或者离开网络</td><td>1. 可靠性低，如果主线断所有都断<br>2.需要采取某些机制避免碰撞<br>3. 两端需要端子吸收信号</td></tr><tr><td>环形</td><td>由若干段单向链路组成，每段链路的首尾通过转发器与其他链路的首/尾相连。</td><td>被传输的信号在每一节点上再生，传输信息误码率可减到最少</td><td>1. 结点故障会引起全网故障<br>2.需要采取某些机制避免碰撞</td></tr></tbody></table></div><h3 id="通信网拓扑结构的演变"><a href="#通信网拓扑结构的演变" class="headerlink" title="通信网拓扑结构的演变"></a>通信网拓扑结构的演变</h3><ul><li>最初，结点之间的交换能力并不强，因此电信网采用的拓扑结构是网状结构，以保证端到端的连通性。并且当时的用户数量少，设置多条链路的开销并不大。</li><li>随着用户数量的增大，网状拓扑结构多余链路的设置会带来更高的成本，因此电信网采用的拓扑结构是星形，当时此时已经有一些技术可以保证通信的可靠性，以弥补星形结构弱可靠性的缺点。</li><li>电话费价格降低带来了业务量的增长，中央结点的负荷量增大，为了能够分担中央结点的负荷，此时中央结点之间由设置链路以分配各中央结点的负荷量，弥补交换能力的不足。用户接入数量的增多以及为了保证用户可以尽可能简单地接入网络，在用户连接端使用的拓扑结构仍然是星形。此时整个通信网被划分为核心网和接入网两大部分，并采用混合的拓扑结构。</li><li>随着业务种类的增长，在这个阶段，中央结点的功能不再是单纯的交换，而有计算、存储等功能。进一步地，由于有足够高的数据率，这些功能节点可以被虚拟化至云服务器，并采用云计算技术提供支持。目前，为了进一步降低传播时延，部分云端的功能被拉入接入网，实现边缘计算。</li></ul><h2 id="TCP-IP和OSI协议体系结构"><a href="#TCP-IP和OSI协议体系结构" class="headerlink" title="TCP-IP和OSI协议体系结构"></a>TCP-IP和OSI协议体系结构</h2><h3 id="协议和协议体系"><a href="#协议和协议体系" class="headerlink" title="协议和协议体系"></a>协议和协议体系</h3><p>通信双方在进行通信时还需要完成一些工作，比如：</p><ul><li>源点系统激活直连的数据信道</li><li>源点系统确认终端已经准备好接收数据</li><li>格式转换<br>这些通信任务需要通信相关的设备和节点能够协同工作，协议就是一种指定协同工作方式和规则的体系结构，这些体系结构是由一组格式化和标准化的数据块承载，协议规定了通信的环境。<br>协议有三个关键因素:</li><li>语法：数据块的格式</li><li>语义：包含控制信息</li><li>定时：包括传输速率的匹配和数据包排序<br>同时，在协议体系中，通信任务被分解为若干个子任务，这些子任务的相互依赖关系形成栈结构。栈中的每一层需要依赖下一层执行更原始的功能，同时这一层也要向上一层提供服务。然而每一层又是相对独立的，即对每一层的设置和改动都不应该影响到其他层。两个通信系统必须要有相同的层次（称为对等层），才能建立层间通信。<h3 id="TCP-IP结构"><a href="#TCP-IP结构" class="headerlink" title="TCP-IP结构"></a>TCP-IP结构</h3>TCP-IP的原始设想是两台计算机通过网络连接，源点应用程序将数据通过网络进行传送最终交付到目的计算机的应用程序中。根据这个设想可以将通信任务划分为如下的五层结构，从下到上依次是：</li><li>物理层：传输设备与传输媒体、网络的物理接口。</li><li>网络接入层：端系统与相连网络之间的数据交换。与相连的两个系统提供网络接入，并进行路由选择。</li><li>网际层/IP层：负责将数据传输跨越多个网络，这一层使用IP协议提供多个网络的路由。</li><li>运输层/TCP层：保证数据包接收的顺序和可靠性，以及对属于不同应用的数据包的分配和交付。</li><li>应用层：支持不同应用程序的逻辑。</li></ul><h2 id="TCP和IP的操作"><a href="#TCP和IP的操作" class="headerlink" title="TCP和IP的操作"></a>TCP和IP的操作</h2><p>IP将来自某个主机的数据块经过多个路由器传递到另一个主机上，为了保证通信成功，每个主机都有一个唯一的全局互联网地址，称为IP地址。而TCP仅仅在端系统上实现，确保所有数据包都被可靠的交付给对应的应用程序，为了保证交付成功，主机上的每一个进程都会有一个内部唯一的地址，称为端口/端口号。而用户计算机上的应用程序可以调用计算机上不同的进程。</p><p>TCP/IP协议族中的每一层都只与它直接的相邻层进行操作，层与层之间的通信语言称为原语，原语大致分为4类：请求、指示、响应和证实。<br>在TCP/IP通信中，进程通过端口将发送数据（报文）递交给TCP，并指定目的地的端口和主机，这个过程会使用请求原语，同样地，TCP层将数据切分为更小的数据块便于管理，并在每个数据块前添加一段控制信息，（这段控制信息包括目的端口、序号、校验和等）并使用请求原语将报文向下递交给IP，IP也在TCP数据报之前附加一段控制信息，形成IP数据报，IP请求讲报文递交给网络接入层，并命令报文发送到路由器上。路由器检查IP数据报的首部，并通过路径转发数据，最终到达目的主机的网络接入层。网络接入层使用指示原语解包将数据传递到IP层，IP层对IP首部进行解包，也使用指示源语将数据传递到TCP层，TCP层解包TCP首部后将数据转发给对应的进程。</p><p>上述过程称为“无证实的服务”。事实上，终端主机在接收到数据后还会通过指示源语向下传递确认信息，源的主机接受到确认信息后通过证实源语向上传递，加入这两个步骤的服务称为“证实的服务”。</p><h3 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h3><p>除了TCP协议外，还有另一种运输层协议，称为用户数据报协议（UPD），这是一种无连接的分组交换协议。UDP可以让一个进程通过最少的协议机制向另一个进程发送报文。其本质是在IP上增加了一个端口寻址的能力。</p><h3 id="OSI参考模型体系结构"><a href="#OSI参考模型体系结构" class="headerlink" title="OSI参考模型体系结构"></a>OSI参考模型体系结构</h3><p>OSI体结构参考模型(OSIRM)包括7层，但是由于TCP协议成熟之时OSI协议尚处于开发阶段，因此整体上的OSI七层模型设计并未得到真正应用。不过基于OSI理念下仍然成功地开发出了很多有用的协议。</p><h2 id="OSI框架的标准化"><a href="#OSI框架的标准化" class="headerlink" title="OSI框架的标准化"></a>OSI框架的标准化</h2><p>OSI框架的标准规定：</p><ul><li>每一层功能有有成熟的定义，并且可以独立并行地为每一层开发标准。</li><li><p>层与层之间的边界有成熟的定义，改变某一层的标准不会影响到一个层中现有的软件。<br>其标准化依赖于三个关键元素：</p></li><li><p>协议规约：不同系统中同层的两个实体可以通过协议相互合作和交互</p></li><li>服务定义：每一层提供给上层的服务需要标准化</li><li>寻址：每一层可以向上一层的多个实体提供多种服务</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>电子电路入门</title>
      <link href="/2023/10/28/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%85%A5%E9%97%A8/"/>
      <url>/2023/10/28/%E7%94%B5%E5%AD%90%E7%94%B5%E8%B7%AF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="欧姆定律"><a href="#欧姆定律" class="headerlink" title="欧姆定律"></a>欧姆定律</h1><p>I = U/R</p><h1 id="电容两端电压不突变"><a href="#电容两端电压不突变" class="headerlink" title="电容两端电压不突变"></a>电容两端电压不突变</h1><p>电容储能特性实现上电延迟，延时断电<br>稳压，滤波<br>为什么要加电容？<br>电压跌落：电池电流不足，电容可以短时间提供大电流<br><img src="https://freeimghost.com/images/2025/07/06/5dccff16-2f6c-4bd3-b15c-d8048acaa6ea.jpeg" alt="code"></p><h1 id="RC低通滤波电路"><a href="#RC低通滤波电路" class="headerlink" title="RC低通滤波电路"></a>RC低通滤波电路</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706143248.jpeg" alt="code"><br>截止频率：f=1/2ΠRC,电压衰减-3db，0.707倍<br>衰减原因<br><img src="https://freeimghost.com/images/2025/07/06/_20250706144030.jpeg" alt="code"><br>实例：滤出高频噪音</p><h1 id="CR高通滤波电路"><a href="#CR高通滤波电路" class="headerlink" title="CR高通滤波电路"></a>CR高通滤波电路</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706144313.png" alt="code"><br>不能有直流偏置，因为直流为0HZ</p><h1 id="电感"><a href="#电感" class="headerlink" title="电感"></a>电感</h1><p><strong>流过电感的电流不能突变</strong>，但不能改变电路电流最大值<br>机械开关由电容组成<br>电感流过电流，电感回路电阻突变很大<br><img src="https://freeimghost.com/images/2025/07/06/_20250706145332.jpeg" alt="code"><br>为了维持电流，电感会生成一个非常大的电压<br>实例：插座电火花<br>解决方案，加二极管<br><img src="https://freeimghost.com/images/2025/07/06/_20250706145802.jpeg" alt="code"><br>感抗：R=2Πfl</p><h1 id="LR电感低通滤波"><a href="#LR电感低通滤波" class="headerlink" title="LR电感低通滤波"></a>LR电感低通滤波</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706150019.jpeg" alt="code"><br>截止频率<br>区别：电阻耗能，RC低通滤波只能应用于低电流场景如信号传输<br>LR低通滤波：电流大/电源线</p><h1 id="RL电感高通滤波"><a href="#RL电感高通滤波" class="headerlink" title="RL电感高通滤波"></a>RL电感高通滤波</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706150626.jpeg" alt="code"><br>电感接地，不能有直流偏置，因为直流为0HZ</p><h1 id="LC低通滤波电路"><a href="#LC低通滤波电路" class="headerlink" title="LC低通滤波电路"></a>LC低通滤波电路</h1><p>效果更好，f变大，衰减变化量更大，<strong>加个小电阻</strong>，LC电路会形成谐振<br><img src="https://freeimghost.com/images/2025/07/06/_20250706151653.jpeg" alt="code"></p><h1 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h1><p>PN<br><img src="https://freeimghost.com/images/2025/07/06/_20250706153818.jpeg" alt="code"><br>工作10mA左右<br>(1) 二极管的伏安特性<br>二极管的电流-电压关系 (I-V特性) 可以用肖克利二极管方程描述：</p><script type="math/tex; mode=display">I = I_S \left( e^{\frac{V_F}{nV_T}} - 1 \right)</script><p>其中：</p><ul><li>$I$：通过二极管的电流 (A)</li><li>$I_S$：反向饱和电流 (极小，通常nA级)</li><li>$V_F$：正向压降 (V)</li><li>$n$：发射系数 (理想二极管 $n = 1$，实际 $1 \leq n \leq 2$)</li><li>$V_T$：热电压 (室温下约26mV)</li></ul><p>结论：</p><ul><li>当 $V_F &gt; 0$ (正向偏置)，电流 $I$ 随 $V_F$ 指数增长。</li></ul><h1 id="反向漏电"><a href="#反向漏电" class="headerlink" title="反向漏电"></a>反向漏电</h1><ol><li>二极管漏电流的基本原理</li></ol><p>(1) 反向漏电流的成因</p><ol><li><p>少数载流子漂移<br>○ 在PN结反向偏置时，耗尽层变宽，但仍有少量电子（N区）和空穴（P区）因热激发产生，形成微小电流。</p></li><li><p>表面漏电<br>○ 二极管封装或PN结表面可能存在污染或缺陷，导致额外的漏电通路。</p></li><li><p>隧道效应（齐纳二极管）<br>○ 在高反向电压下，量子隧穿效应会导致电流急剧增加（击穿区）。</p></li></ol><h1 id="二极管整流-（半波）"><a href="#二极管整流-（半波）" class="headerlink" title="二极管整流 （半波）"></a>二极管整流 （半波）</h1><p><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706153818.xbsAH0https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706165714.xb1VZC" alt="code"><br>R控制充电速度<br><strong>由于二极管压降，电容充电比输入小0.7V时开始</strong>，<img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706170558.xb1xfG" alt="code"></p><p>最终会输出<strong>Vinmax-二极管压降</strong>的电压，注意电源减去二极管压降和电阻分压后，电压高于当前电容电压后才会充电，二极管阻止放电</p><h1 id="二极管整流-（全波）"><a href="#二极管整流-（全波）" class="headerlink" title="二极管整流 （全波）"></a>二极管整流 （全波）</h1><p><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706171116.xb1lTI" alt="code"><br><strong>注意计算二极管压降</strong><br>波形从1.4V开始上升，波形<br><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706171521.xb1dnA" alt="code"><br>加电容，放电<br><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706171633.xb15KB" alt="code"></p><h1 id="二极管钳位功能"><a href="#二极管钳位功能" class="headerlink" title="二极管钳位功能"></a>二极管钳位功能</h1><p><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706171831.xb1FVH" alt="code"></p><p><strong>二极管会将并联电阻电压控制为压降</strong>，前置条件：去除二极管后，并联的电阻本身电压要大于压降<br>二极管反接保护，控制电流方向</p><p>二极管反向耐压</p><h1 id="稳压二极管"><a href="#稳压二极管" class="headerlink" title="稳压二极管"></a>稳压二极管</h1><p><img src="https://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706171831.xb1FVHhttps://freeimghost.com/i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE-20250706173306.xb1Ln6" alt="code"></p><p>尽量工作电流5mA</p><h1 id="三极管"><a href="#三极管" class="headerlink" title="三极管"></a>三极管</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706173629.jpeg" alt="code"><br>电子开关<br><img src="https://freeimghost.com/images/2025/07/06/_20250706174307.jpeg" alt="code"><br>电压：<br>Vce=Vcc（电源电压）断开<br>Vce<0.3饱和0.3<vce < Vcc 放大电流Ib=0断开Ib*β>Ic饱和<br>Ib*β=Ic放大</p><p>N管最好发射极接地，P管接电源<br><img src="https://freeimghost.com/images/2025/07/06/_20250706204748.jpeg" alt="微信截图 20250706204748"></p><p><img src="https://freeimghost.com/images/2025/07/06/_20250706204708.jpeg" alt="微信截图 20250706204708"><br>电压Vce=Vcc截止<br>Vce</p><h1 id="三极管反相"><a href="#三极管反相" class="headerlink" title="三极管反相"></a>三极管反相</h1><p><img src="https://freeimghost.com/images/2025/07/06/_20250706204708.jpeg" alt="微信截图 20250706204708"><img src="https://freeimghost.com/images/2025/07/06/_20250706214310.png" alt="微信图片 20250706214310"></p><h1 id="三极管基极下拉电阻"><a href="#三极管基极下拉电阻" class="headerlink" title="三极管基极下拉电阻"></a>三极管基极下拉电阻</h1><p>噪音来源：220v电源附加的人体会产生感应电荷（工频干扰）<br>解决方案<br>N管下拉电阻<br><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_171140_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 171140 www.bilibili.com"><br>p管上拉电阻<br><img src="https://freeimghost.com/images/2025/07 /08/_8-7-2025_172056_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 172056 www.bilibili.com"><br><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_172653_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 172653 www.bilibili.com"><br>三极管耐压<br>Vbe最小<br>Vce<br>Vcb最大</p><h1 id="比较器"><a href="#比较器" class="headerlink" title="比较器"></a>比较器</h1><p><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_173247_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 173247 www.bilibili.com"></p><h1 id="红外接收二极管"><a href="#红外接收二极管" class="headerlink" title="红外接收二极管"></a>红外接收二极管</h1><p>和二极管反向相反<br>没有红外线接收，断开<br>接收，导通</p><h1 id="设计自动出水水龙头"><a href="#设计自动出水水龙头" class="headerlink" title="设计自动出水水龙头"></a>设计自动出水水龙头</h1><p>电机相当于电感，有电感的电路加个续流二极管<br>普通二极管如 1N4007 就可以作为续流二极管，不过，最好是用快速恢复二极管或者肖特基二极管.</p><p><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_20526_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 20526 www.bilibili.com"></p><h1 id="比较器工作原理"><a href="#比较器工作原理" class="headerlink" title="比较器工作原理"></a>比较器工作原理</h1><p>推挽输出：这种比较器会输出Vcc 和 GND<br>开漏/开集：需要上拉电阻控制</p><p><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_201112_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 201112 www.bilibili.com"></p><h1 id="温控风扇"><a href="#温控风扇" class="headerlink" title="温控风扇"></a>温控风扇</h1><p>热敏电阻：正/负温度特性：温度越高电阻越大<br><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_202015_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 202015 www.bilibili.com"><br><strong>注意加上p管上拉电阻，和续流二极管</strong></p><h1 id="Mos管"><a href="#Mos管" class="headerlink" title="Mos管"></a>Mos管</h1><p><img src="https://freeimghost.com/images/2025/07/08/22e26add55da2a09c803a6ed67ee4777.png" alt="22e26add55da2a09c803a6ed67ee4777"><br>互相绝缘，所以可以看成寄生电容，PN可以看成二极管，mos管S极和B导线连接，所以S到D之间有个二极管<br><img src="https://freeimghost.com/images/2025/07/08/_8-7-2025_204656_www.bilibili.com.jpeg" alt="屏幕截图 8 7 2025 204656 www.bilibili.com"></p><h1 id="Mos导通条件"><a href="#Mos导通条件" class="headerlink" title="Mos导通条件"></a>Mos导通条件</h1><p><img src="https://freeimghost.com/images/2025/07/08/screenshot-20250708-205447.png" alt="screenshot 20250708 205447"><br>Vth为负值 </p><h1 id="开关电路设计"><a href="#开关电路设计" class="headerlink" title="开关电路设计"></a>开关电路设计</h1><p>三极管：电流控制电流<br>MOS管：电压控制电流(栅极可以不加电阻)</p><h1 id="mos寄生电容问题"><a href="#mos寄生电容问题" class="headerlink" title="mos寄生电容问题"></a>mos寄生电容问题</h1><p>mos寄生电容充电后，电容储能，<br>解决方案：mos管 g极和s极之间接个大电阻放电</p><h1 id="mos管体二极管"><a href="#mos管体二极管" class="headerlink" title="mos管体二极管"></a>mos管体二极管</h1><p><img src="https://freeimghost.com/images/2025/07/08/screenshot-20250708-221547.png" alt="screenshot 20250708 221547"><br><strong>注意此处10V电源可能会通过mos体二极管给电池充电</strong></p><h1 id="Nmos做开关的注意事项（s极未接地）"><a href="#Nmos做开关的注意事项（s极未接地）" class="headerlink" title="Nmos做开关的注意事项（s极未接地）"></a>Nmos做开关的注意事项（s极未接地）</h1><p>第一种情况下由于mos管寄生电容使得s极电压持续上升导致没法导通<br><img src="https://freeimghost.com/images/2025/07/08/screenshot-20250708-225547.png" alt="screenshot 20250708 225547"><br>解决方案：将GS之间的电源电压升高，超过减去压降后的值大于DS之间电压（会增加成本）<br>解决方案2：将电池负极接入s极<br>（电池特性：正极比负极始终大电源电压）</p><p><img src="https://freeimghost.com/images/2025/07/08/screenshot-20250708-225445.png" alt="screenshot 20250708 225445"></p><h1 id="pmos管开关电路设计"><a href="#pmos管开关电路设计" class="headerlink" title="pmos管开关电路设计"></a>pmos管开关电路设计</h1><p>Pmos管解决Nmos管浮空方案<br><img src="https://freeimghost.com/images/2025/07/08/screenshot-20250709-101540.png" alt="screenshot 20250709 101540"><br>大功率场景通常用Nmos，Pmos管性能较差</p><h1 id="Pmos管防反接"><a href="#Pmos管防反接" class="headerlink" title="Pmos管防反接"></a>Pmos管防反接</h1><h1 id="mos管DS之间电流可以双向流通"><a href="#mos管DS之间电流可以双向流通" class="headerlink" title="mos管DS之间电流可以双向流通"></a>mos管DS之间电流可以双向流通</h1><p>体二极管的影响可以通过另外的mos管抵消，<br><img src="https://freeimghost.com/images/2025/07/09/screenshot-20250709-213520.png" alt="screenshot 20250709 213520"></p><h1 id="比较器注意事项"><a href="#比较器注意事项" class="headerlink" title="比较器注意事项"></a>比较器注意事项</h1><p> <img src="https://freeimghost.com/images/2025/07/09/screenshot-20250710-075640.png" alt="screenshot 20250710 075640"><br> 解决方案： </p><h1 id="运放"><a href="#运放" class="headerlink" title="运放"></a>运放</h1><h2 id="虚短"><a href="#虚短" class="headerlink" title="虚短"></a>虚短</h2><p> <a href="https://freeimghost.com/i/screenshot-20250710-075640.xsSekPhttps://freeimghost.com/i/screenshot-20250710-082515.xsS6hg">https://freeimghost.com/i/screenshot-20250710-075640.xsSekPhttps://freeimghost.com/i/screenshot-20250710-082515.xsS6hg</a><br> 负/正反馈：输出电路减少/增加电压差</p><h2 id="虚断"><a href="#虚断" class="headerlink" title="虚断"></a>虚断</h2><p>例如：当外部并联超级大电阻，没有影响内部电路<br>可以看成断路。运放里面有个大电阻，对外部电路基本没有影响。</p><h1 id="同向放大电路"><a href="#同向放大电路" class="headerlink" title="同向放大电路"></a>同向放大电路</h1><p>是否虚短：看是否为负反馈<br><img src="https://freeimghost.com/images/2025/07/09/screenshot-20250710-082515.png" alt="screenshot 20250710 082515"></p><p><img src="https://freeimghost.com/images/2025/07/10/v2-d801fbe99b170520a3e69ae0a0cfc653_r.jpg" alt="v2 d801fbe99b170520a3e69ae0a0cfc653 r"><br>如图1.2(a)，把输出信号的一部分引入正相输入端“+”为正反馈。图1.2（b），把输出信号的一部分引入反相输入端“-”为负反馈。</p><h1 id="反向放大电路"><a href="#反向放大电路" class="headerlink" title="反向放大电路"></a>反向放大电路</h1><p><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_174817_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 174817 www.bilibili.com"><br>单电源<br><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_175625_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 175625 www.bilibili.com"><br>S</p><h1 id="差分放大电路"><a href="#差分放大电路" class="headerlink" title="差分放大电路"></a>差分放大电路</h1><p><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_181452_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 181452 www.bilibili.com"></p><h1 id="电流检测电路—单端检测（低端检测）"><a href="#电流检测电路—单端检测（低端检测）" class="headerlink" title="电流检测电路—单端检测（低端检测）"></a>电流检测电路—单端检测（低端检测）</h1><p>理想运放<br> <img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_194616_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 194616 www.bilibili.com"><br>轨对轨运放：和电源相同<br>注意：运放范围(最好接个负电源)，运输Vos对电路影响（自校准，差好多加好多）。例如：加入偏置网络，提高初始电压（0.1V）。（原理：电阻分压）</p><h1 id="电流检测电路—高端检测（高端检测）"><a href="#电流检测电路—高端检测（高端检测）" class="headerlink" title="电流检测电路—高端检测（高端检测）"></a>电流检测电路—高端检测（高端检测）</h1><p><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_194616_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 194616 www.bilibili.com"><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_205621_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 205621 www.bilibili.com"><br>但常用以下<br><img src="https://freeimghost.com/images/2025/07/10/_10-7-2025_211518_www.bilibili.com.jpeg" alt="屏幕截图 10 7 2025 211518 www.bilibili.com"></p><p><strong>注意</strong>：高端控制靠近Vcc，可以用电阻分压减小V＋，使得控制运放电压范围</p><h1 id="跨租放大"><a href="#跨租放大" class="headerlink" title="跨租放大"></a>跨租放大</h1><p>检测电路，恒流源：可能是光敏二极管，化学电极<br><img src="https://freeimghost.com/images/2025/07/12/_12-7-2025_173242_www.bilibili.com.jpeg" alt="屏幕截图 12 7 2025 173242 www.bilibili.com"></p><p><img src="https://freeimghost.com/images/2025/07/12/_12-7-2025_173657_www.bilibili.com.jpeg" alt="屏幕截图 12 7 2025 173657 www.bilibili.com"></p><h1 id="恒流源"><a href="#恒流源" class="headerlink" title="恒流源"></a>恒流源</h1><p><img src="https://freeimghost.com/images/2025/07/12/_12-7-2025_17485_www.bilibili.com.jpeg" alt="屏幕截图 12 7 2025 17485 www.bilibili.com"><br>电流不够准确：反馈电路电阻太小<br>最大负载限制：恒流还是由电压源提供，不能超过最大值<br>运放最大输出电流：50ma<br>运放电流不够：加一个二极管放大</p><h1 id="恒流源——高端反馈"><a href="#恒流源——高端反馈" class="headerlink" title="恒流源——高端反馈"></a>恒流源——高端反馈</h1><p><img src="https://freeimghost.com/images/2025/07/13/_13-7-2025_17234_www.bilibili.com.jpeg" alt="屏幕截图 13 7 2025 17234 www.bilibili.com"><br>自激震荡：<br>1.反馈跟不上运放速度<br>加电容</p><h1 id="直流稳压电源（ldo）"><a href="#直流稳压电源（ldo）" class="headerlink" title="直流稳压电源（ldo）"></a>直流稳压电源（ldo）</h1><p><img src="https://freeimghost.com/images/2025/07/13/_13-7-2025_171849_www.bilibili.com.jpeg" alt="屏幕截图 13 7 2025 171849 www.bilibili.com"></p><h1 id="直流稳压电源——不带反馈"><a href="#直流稳压电源——不带反馈" class="headerlink" title="直流稳压电源——不带反馈"></a>直流稳压电源——不带反馈</h1><p><img src="https://freeimghost.com/images/2025/07/13/_13-7-2025_172447_www.bilibili.com.jpeg" alt="屏幕截图 13 7 2025 172447 www.bilibili.com"><br>稳压二极管控制三极管，三极管控制输出电压</p><h1 id="降压型开关电源（buck电路）"><a href="#降压型开关电源（buck电路）" class="headerlink" title="降压型开关电源（buck电路）"></a>降压型开关电源（buck电路）</h1><h1 id="boost升压"><a href="#boost升压" class="headerlink" title="boost升压"></a>boost升压</h1><h1 id="电荷泵"><a href="#电荷泵" class="headerlink" title="电荷泵"></a>电荷泵</h1>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2022/10/28/2025-4-27%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2022/10/28/2025-4-27%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇文章"><a href="#第一篇文章" class="headerlink" title="第一篇文章"></a>第一篇文章</h2><p>nbdhfdfj</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Copyright-beautify</title>
      <link href="/2021/03/02/2025-6-3%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2021/03/02/2025-6-3%E7%AC%AC%E4%BA%8C%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<script type="math/tex; mode=display">\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.</script><script type="math/tex; mode=display">?sdjdj</script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
